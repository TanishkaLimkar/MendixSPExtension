<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mendix.StudioPro.ExtensionsAPI</name>
    </assembly>
    <members>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.BackgroundJobs.BackgroundJob">
            <summary>
            It represents a collection of <see cref="T:Mendix.StudioPro.ExtensionsAPI.BackgroundJobs.BackgroundJobStep"/> which will run in sequence.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.BackgroundJobs.BackgroundJob.Title">
            <summary>
            The title of the background job. It must be provided.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.BackgroundJobs.BackgroundJob.Steps">
            <summary>
            The steps of the job.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.BackgroundJobs.BackgroundJob.AddStep(System.String,System.String,System.Func{System.Boolean})">
            <summary>
            This method allows adding steps to a <see cref="T:Mendix.StudioPro.ExtensionsAPI.BackgroundJobs.BackgroundJob"/>. It can be used like:
            <code>
            var job = new BackgroundJob("Background Job Title")
               .AddStep("step one", "description one", () => true)
               .AddStep("step two", "description two", () => true)
               .AddStep("step three", "description three", () => true);
            </code>
            </summary>
            <param name="title">The title of the step.</param>
            <param name="description">The description of the step.</param>
            <param name="function">The function of the step. It returns true when successful or false when it failed.</param>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.BackgroundJobs.BackgroundJobStep">
            <summary>
            A step of a background job.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.BackgroundJobs.BackgroundJobStep.#ctor(System.String,System.String,System.Func{System.Boolean})">
            <summary>
            It allows to add a step to the <see cref="T:Mendix.StudioPro.ExtensionsAPI.BackgroundJobs.BackgroundJob"/> dialog.
            </summary>
            <param name="title">The title of the step. It must be provided.</param>
            <param name="description">The description of the step. It must be provided.</param>
            <param name="function">The function of the step. It must be provided.</param>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.BackgroundJobs.BackgroundJobStep.Title">
            <summary>
            The title of the step.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.BackgroundJobs.BackgroundJobStep.Description">
            <summary>
            The description of the step.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.BackgroundJobs.BackgroundJobStep.Function">
            <summary>
            The function of the step.
            </summary>
            <returns>It returns true when successful or false when it failed.</returns>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Build.BuildExtension">
            <summary>
            Base class for an extension that performs some operations during app build.
            </summary>
            <remarks>Build extensions are loaded in Studio Pro and MxBuild and hence must not use any gui-specific APIs, like <see cref="N:Mendix.StudioPro.ExtensionsAPI.UI"/>.</remarks>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Build.BuildExtension.ProcessModelBeforeBuild(Mendix.StudioPro.ExtensionsAPI.Model.IModel)">
            <summary>
            Can be overriden in a derived class to modify the <paramref name="model"/> before it is deployed.
            </summary>
            <remarks>
            <see cref="M:Mendix.StudioPro.ExtensionsAPI.Build.BuildExtension.ProcessModelBeforeBuild(Mendix.StudioPro.ExtensionsAPI.Model.IModel)"/> is triggered before any other build operation. Note that any changes you do to <paramref name="model"/> will be
            visible to the subsequent deployment step, but will not be visible to the Studio Pro user nor will it be saved on disk.
            </remarks>
            <param name="model">
            Build-only representation of the app model. Any change done to this representation are scoped to the deployment process and are not saved to disk or visible
            to the Studio Pro user.
            </param>
            <returns>
            Optionally, returns an object representing a build state. It will be passed to subsequent hooks. Empty object by default.
            </returns>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Build.BuildExtension.PostProcessGenerationResult(Mendix.StudioPro.ExtensionsAPI.Model.IModel,System.Object)">
            <summary>
            Can be overriden in a derived class to modify the result of an app deployment.
            </summary>
            <remarks>
            <see cref="M:Mendix.StudioPro.ExtensionsAPI.Build.BuildExtension.PostProcessGenerationResult(Mendix.StudioPro.ExtensionsAPI.Model.IModel,System.Object)"/> is invoked after <c>deployment</c> folder was created and filled, but before invoking compilers (e.g. Java compiler,
            ReactNative bundler) that process any files generated on previous steps.
            </remarks>
            <param name="model">
            Build-only representation of the app model. Any changes done to this representation at this point have no effect.
            </param>
            <param name="buildState">
            Build state returned by <see cref="M:Mendix.StudioPro.ExtensionsAPI.Build.BuildExtension.ProcessModelBeforeBuild(Mendix.StudioPro.ExtensionsAPI.Model.IModel)"/>. Empty object by default.
            </param>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.ConsistencyCheck.ConsistencyCheckExtension`1">
             <summary>
             Base class for an extension that introduces new <see href="https://docs.mendix.com/refguide/consistency-errors/">consistency errors (warnings)</see> for
             specific model elements.
             </summary>
             <remarks>
             Consistency check extensions are loaded in Studio Pro and MxBuild and hence must not use any gui-specific APIs, like <see cref="N:Mendix.StudioPro.ExtensionsAPI.UI"/>.
            
             Note that the consistency check process can be interrupted and restarted at any point. It also can also be split across multiple threads, or multiple check
             processes can be ran simultaneously (on the same or different threads). Avoid holding any state in your <see cref="T:Mendix.StudioPro.ExtensionsAPI.ConsistencyCheck.ConsistencyCheckExtension`1"/>
             implementation.
            
             Extension must be marked with <see cref="T:System.ComponentModel.Composition.ExportAttribute"/> as <c>[Export(typeof(ConsistencyCheckExtension&lt;&gt;))]</c>, otherwise it will not be loaded.
             </remarks>
             <example>
             You can implement extension as following:
             <code>
             [Export(typeof(ConsistencyCheckExtension&lt;&gt;))]
             public class MyExtension : ConsistencyCheckExtension&lt;IEntity&gt;
             {
                 public override IEnumerable&lt;ConsistencyError&gt; Check(IEntity entity, IModel model)
                 {
                     // returns any consistency errors for the entity
                 }
             }
             </code>
             </example>
             <typeparam name="TCheckedStructure">Type of the <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.IStructure"/> to check.</typeparam>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.ConsistencyCheck.ConsistencyCheckExtension`1.Check(`0,Mendix.StudioPro.ExtensionsAPI.Model.IModel)">
             <summary>
             Should be overriden in a derived class to perform consistency checks for a <typeparamref name="TCheckedStructure">structure</typeparamref>.
             </summary>
             <remarks>
             <see cref="M:Mendix.StudioPro.ExtensionsAPI.ConsistencyCheck.ConsistencyCheckExtension`1.Check(`0,Mendix.StudioPro.ExtensionsAPI.Model.IModel)"/> is invoked after Studio Pro starts up or after the app structure has changed.
            
             Studio Pro heavily optimizes the consistency check process by tracking what model elements <see cref="M:Mendix.StudioPro.ExtensionsAPI.ConsistencyCheck.ConsistencyCheckExtension`1.Check(`0,Mendix.StudioPro.ExtensionsAPI.Model.IModel)"/> method accesses, and re-running it only
             when these elements change. Hence it is adviced to access as few model elements as possible in one <see cref="T:Mendix.StudioPro.ExtensionsAPI.ConsistencyCheck.ConsistencyCheckExtension`1"/>.
            
             Note that multiple consistency check can be ran in parallel and that one consistency check can be ran over multiple threads. Do not make any assumptions
             about order of execution of <see cref="M:Mendix.StudioPro.ExtensionsAPI.ConsistencyCheck.ConsistencyCheckExtension`1.Check(`0,Mendix.StudioPro.ExtensionsAPI.Model.IModel)"/> and do not rely on state in <see cref="T:Mendix.StudioPro.ExtensionsAPI.ConsistencyCheck.ConsistencyCheckExtension`1"/>.
             </remarks>
             <param name="structure">The <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.IStructure"/> to be checked for consistency by this method.</param>
             <param name="model">Representation of the app model. Immutable.</param>
             <returns>List of <see cref="T:Mendix.StudioPro.ExtensionsAPI.ConsistencyCheck.ConsistencyError"/> errors found in the <paramref name="structure"/>.</returns>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.ConsistencyCheck.ConsistencyError">
            <summary>
            Represents consistency check errors in Studio Pro and MxBuild.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.ConsistencyCheck.ConsistencyError.#ctor(System.String,Mendix.StudioPro.ExtensionsAPI.Model.IStructure,System.String,System.String,Mendix.StudioPro.ExtensionsAPI.ConsistencyCheck.Severity)">
            <summary>
            Construct new <see cref="T:Mendix.StudioPro.ExtensionsAPI.ConsistencyCheck.ConsistencyError"/>.
            </summary>
            <param name="message">The error message.</param>
            <param name="errorSource">The specific structure causing the error.</param>
            <param name="errorSourceDescription">
            The description of the structure causing the error. Ignored for Core model structures, as description is inferred from <paramref name="errorSource"/>,
            and hence can be left <c>null</c>.
            </param>
            <param name="errorSourceProperty">Description of <paramref name="errorSource"/>'s property causing the error, if any.</param>
            <param name="severity">The severity of the failed check.</param>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.ConsistencyCheck.ConsistencyError.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.ConsistencyCheck.ConsistencyError.ErrorSource">
            <summary>
            The specific element causing the error.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.ConsistencyCheck.ConsistencyError.ErrorSourceDescription">
            <summary>
            The description of the element causing the error. This property is ignored (so can be left <c>null</c>) if the source of the error is a Core model.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.ConsistencyCheck.ConsistencyError.ErrorSourceProperty">
            <summary>
            Description of <see cref="P:Mendix.StudioPro.ExtensionsAPI.ConsistencyCheck.ConsistencyError.ErrorSource"/>'s property causing the error, if any.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.ConsistencyCheck.ConsistencyError.Severity">
            <summary>
            The severity of the failed check. Could be Error, Warning, or Deprecation. It defaults to Error.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.ExtensionBase">
            <summary>
            Base class for all extensions. Do not inherit from this class directly, but use concrete extension points like <see cref="T:Mendix.StudioPro.ExtensionsAPI.ConsistencyCheck.ConsistencyCheckExtension`1"/>.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.ExtensionBase.Configuration">
            <summary>
            Current Studio Pro configuration.
            </summary>
            <remarks>
            This property is not available until the extension has been fully constructed.
            Use <see cref="T:Mendix.StudioPro.ExtensionsAPI.Services.IConfigurationService"/> if you need the configuration in the constructor of your extension.
            </remarks>
            <exception cref="T:System.InvalidOperationException">When trying to access this property in the constructor of the extensions.</exception>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.IConfiguration">
            <summary>
            Global Studio Pro configuration that can depend on environment or user-defined settings.
            </summary>
            <remarks>
            Configuration can be accessed in any extension from <see cref="P:Mendix.StudioPro.ExtensionsAPI.ExtensionBase.Configuration"/>, or can be obtained by having <see cref="T:Mendix.StudioPro.ExtensionsAPI.Services.IConfigurationService"/> injected into your class.
            </remarks>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.IConfiguration.TargetServices">
            <summary>
            Versions of global services Studio Pro instance should use.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.IConfiguration.Theme">
            <summary>
            User interface theme currently in use.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.IConfiguration.ProxyCredentials">
            <summary>
            Credentials of user proxy.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.IConfiguration.MendixVersion">
            <summary>
            Version of Studio Pro in the semver v2 format <c>major.minor.patch</c>.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.IConfiguration.EarliestSupportedLegacyMendixVersion">
            <summary>
            Latest compatible version of Studio Pro in the semver v2 format <c>major.minor.patch</c>.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.IConfiguration.LatestSupportedLegacyMendixVersion">
            <summary>
            Latest compatible version of Studio Pro in the semver v2 format <c>major.minor.patch</c>.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.IConfiguration.BuildTag">
            <summary>
            Tag uniquely identifying Studio Pro build.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.ServicesEnvironment">
            <summary>
            Represents a versions of global services accessed by Studio Pro.
            </summary>
        </member>
        <member name="F:Mendix.StudioPro.ExtensionsAPI.ServicesEnvironment.None">
            <summary>
            Global services should not be used.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.ThemeSupport">
            <summary>
            Represents a user interface theme in Studio Pro.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.IHttpClient">
            <summary>
            Provides a class for sending HTTP requests and receiving HTTP responses from a resource identified by a URI.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.IHttpClient.Timeout">
            <summary>
            Gets or sets the timespan to wait before the request times out.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.IHttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Send an HTTP request as an asynchronous operation.
            </summary>
            <param name="request">The HTTP request message to send.</param>
            <param name="cancellationToken">The cancellation token to cancel operation.</param>
            <returns>Returns an http message asynchronously.</returns>
            <exception cref="T:System.ArgumentNullException">The request is null.</exception>
            <exception cref="T:System.InvalidOperationException">The request message was already sent by the HttpClient instance.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">The request failed due to timeout.</exception>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.CanBeExtendedAttribute">
            <summary>
            Attribute indicating that a target interface represents an
            <see href="https://docs.mendix.com/apidocs-mxsdk/mxsdk/understanding-the-metamodel#2-1-abstract-element-types">abstract element</see> or unit
            that can be extended while creating your own custom metamodel element (or unit).
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.BinaryType">
            <summary>
            Represents the Binary data type.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.BooleanType">
            <summary>
            Represents the Boolean data type.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.DataType">
            <summary>
            Represents Mendix data types used in the app model and related places, such as microflow variables.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.DataType.Binary">
            <summary>
            Gets a data type representing the Binary primitive data type.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.DataType.Boolean">
            <summary>
            Gets a data type representing the Boolean primitive data type.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.DataType.DateTime">
            <summary>
            Gets a data type representing the DateTime primitive data type.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.DataType.Decimal">
            <summary>
            Gets a data type representing the Decimal primitive data type.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.DataType.Empty">
            <summary>
            Gets a data type representing the empty value.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.DataType.Float">
            <summary>
            Gets a data type representing the Float primitive data type.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.DataType.Integer">
            <summary>
            Gets a data type representing the Integer primitive data type.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.DataType.String">
            <summary>
            Gets a data type representing the String primitive data type.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.DataType.Unknown">
            <summary>
            Gets a data type representing an unknown data type.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.DataType.Void">
            <summary>
            Gets a data type representing the Void primitive data type.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.DataType.Enumeration(Mendix.StudioPro.ExtensionsAPI.Model.IQualifiedName{Mendix.StudioPro.ExtensionsAPI.Model.Enumerations.IEnumeration})">
            <summary>
            Gets a data type representing a specific enumeration defined in an app model.
            </summary>
            <param name="enumeration">The qualified name of the enumeration</param>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.DataType.Object(Mendix.StudioPro.ExtensionsAPI.Model.IQualifiedName{Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity})">
            <summary>
            Gets a data type representing a single object of a specific entity defined in the app model.
            </summary>
            <param name="entity">The qualified name of the entity</param>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.DataType.List(Mendix.StudioPro.ExtensionsAPI.Model.IQualifiedName{Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity})">
            <summary>
            Gets a data type representing a list of objects of a specific entity defined in the app model.
            </summary>
            <param name="entity">The qualified name of the entity</param>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.DateTimeType">
            <summary>
            Represents the DateTime data type.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.DecimalType">
            <summary>
            Represents the Decimal data type.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.EmptyType">
            <summary>
            Represents the empty value.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.EntityType">
            <summary>
            Base class for data types representing one or more instances of a certain entity.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.EntityType.EntityName">
            <summary>
            The entity referred to by this data type.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.EnumerationType">
            <summary>
            Represents an enumeration data type.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.EnumerationType.EnumerationName">
            <summary>
            The enumeration referred to by this data type.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.FloatType">
            <summary>
            Represents the Float data type.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.IntegerType">
            <summary>
            Represents the Integer data type.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.ListType">
            <summary>
            Represents a data type for a list of objects of a certain entity.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.ObjectType">
            <summary>
            Represents a data type for a single object of a certain entity.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.StringType">
            <summary>
            Represents the String data type.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.UnknownType">
            <summary>
            Represents an unknown data type.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.VoidType">
            <summary>
            Represents the Void data type.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.AssociationDirection">
            <summary>
            It determines which type of <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IAssociation"/> should be returned when searching for them. If <see cref="F:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.AssociationDirection.Parent"/>, only associations where the <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity"/> requested is the parent will be returned. If <see cref="F:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.AssociationDirection.Child"/>, only associations where the <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity"/> requested is the child will be returned. Or any associations if <see cref="F:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.AssociationDirection.Both"/> is used.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.AssociationOwner">
            <summary>
            This property defines whether an <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IAssociation">association</see> has one or two owners. If there is one owner, the owner is located at the start of the arrow.
            </summary>
        </member>
        <member name="F:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.AssociationOwner.Default">
            <summary>
            Only one entity is the owner (the parent).
            </summary>
        </member>
        <member name="F:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.AssociationOwner.Both">
            <summary>
            Both entities are owners.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.AssociationType">
            <summary>
            This property defines whether an <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IAssociation">association</see> is a reference (single) or a reference set (plural).
            </summary>
        </member>
        <member name="F:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.AssociationType.Reference">
            <summary>
            An object of the <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.AssociationOwner">owner</see> entity refers to zero or one objects of the other entity.
            </summary>
        </member>
        <member name="F:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.AssociationType.ReferenceSet">
            <summary>
            An object of the <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.AssociationOwner">owner</see> entity refers to zero or more objects of the other entity.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.DeletingBehavior">
            <summary>
            The behavior which occurs when deleting one side of an <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IAssociation">association</see>.
            </summary>
        </member>
        <member name="F:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.DeletingBehavior.DeleteMeAndReferences">
            <summary>
            It will delete the <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IAssociation">association</see> and its references.
            </summary>
        </member>
        <member name="F:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.DeletingBehavior.DeleteMeButKeepReferences">
            <summary>
            It will delete the <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IAssociation">association</see> and not its references.
            </summary>
        </member>
        <member name="F:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.DeletingBehavior.DeleteMeIfNoReferences">
            <summary>
            It will delete the <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IAssociation">association</see> if it had no references.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.EntityAssociation">
            <summary>
            It represents an <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IAssociation"/> between two <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity"/> objects.
            </summary>
            <param name="Parent">The parent of the association.</param>
            <param name="Child">The child of the association.</param>
            <param name="Association">The association</param>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.EntityAssociation.#ctor(Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity,Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity,Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IAssociation)">
            <summary>
            It represents an <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IAssociation"/> between two <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity"/> objects.
            </summary>
            <param name="Parent">The parent of the association.</param>
            <param name="Child">The child of the association.</param>
            <param name="Association">The association</param>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.EntityAssociation.Parent">
            <summary>The parent of the association.</summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.EntityAssociation.Child">
            <summary>The child of the association.</summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.EntityAssociation.Association">
            <summary>The association</summary>
        </member>
        <member name="F:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.EventType.RollBack">
            <summary>
            Rollback
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IAssociation.Name">
            <summary>
            The name of the association is used to refer to it from forms, microflows, XPath constraints, etcetera.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IAssociation.DataStorageGuid">
            <summary>
            Gets the Data Storage GUID of this entity. This is the GUID that identifies this entity in the Mendix Runtime database.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IAssociation.Documentation">
            <summary>
            The documentation of the association.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IAssociation.Owner">
            <summary>
            The <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.AssociationOwner">owner</see> of the association.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IAssociation.Type">
            <summary>
            The <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.AssociationType">type</see> of the association.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IAssociation.ParentDeleteBehavior">
            <summary>
            The <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.DeletingBehavior">behavior</see> which occurs when deleting the parent association.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IAssociation.ChildDeleteBehavior">
            <summary>
            The <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.DeletingBehavior">behavior</see> which occurs when deleting the child association.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IAttribute.DataStorageGuid">
            <summary>
            Gets the Data Storage GUID of this attribute. This is the GUID that identifies this attribute in the Mendix Runtime database.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity.DataStorageGuid">
            <summary>
            Gets the Data Storage GUID of this entity. This is the GUID that identifies this entity in the Mendix Runtime database.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity.AddAssociation(Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity)">
            <summary>
            Create an <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IAssociation"></see> between this entity and another. This entity will be the parent.
            </summary>
            <param name="otherEntity">
            The child entity of the association.
            </param>
            <returns>The new <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IAssociation"></see> between this entity and the other entity.</returns>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity.DeleteAssociation(Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IAssociation)">
            <summary>
            It deletes an <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IAssociation"/> from the entity.
            </summary>
            <param name="association">The association to remove.</param>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity.GetAssociations(Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.AssociationDirection,Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity)">
            <summary>
            It returns a list of <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IAssociation"/> where this entity is either the child or parent.
            </summary>
            <param name="direction">It filters which associations should be returned. Either <see cref="F:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.AssociationDirection.Parent"/>, <see cref="F:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.AssociationDirection.Child"/> or <see cref="F:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.AssociationDirection.Both"/>.</param>
            <param name="otherEntity">Optional entity on the other side of the <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IAssociation"/>. If not supplied, any entity associated to this one will be used to find associations.</param>
            <returns></returns>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.IAbstractUnit">
            <summary>
            Representation of a single <see href="https://docs.mendix.com/apidocs-mxsdk/mxsdk/understanding-the-metamodel#1-units">unit</see> in metamodel.
            This is an abstract unit, so all instances of <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.IAbstractUnit"/> implement more concrete interface like <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Projects.IFolder"/>.
            </summary>
            <seealso href="https://apidocs.rnd.mendix.com/modelsdk/latest/classes/abstractunit.html"/>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.IAbstractUnit.Id">
            <summary>
            Unique identifier of the document. It does not change when a document is renamed or moved.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.IElement">
            <summary>
            Representation of a single <see href="https://docs.mendix.com/apidocs-mxsdk/mxsdk/understanding-the-metamodel#2-elements">element</see> in metamodel.
            This is an abstract element, so all instances of <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.IElement"/> also implement more concrete interface like <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Microflows.IMicroflow"/>.
            </summary>
            <seealso href="https://docs.mendix.com/apidocs-mxsdk/mxsdk/projects-metamodel#2-elements"/>
            <seealso href="https://apidocs.rnd.mendix.com/modelsdk/latest/classes/element.html"/>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.IModel">
            <summary>
            Representation of Mendix app loaded in Studio Pro in terms of <see href="https://docs.mendix.com/apidocs-mxsdk/mxsdk/understanding-the-metamodel">Mendix Metamodel</see>.
            </summary>
            <remarks>
            Interfaces used to expose an app in Studio Pro are aligned with the interfaces of <see href="https://docs.mendix.com/apidocs-mxsdk/mxsdk/">Mendix Platform SDK</see>,
            so it can be handy to have its <see href="https://apidocs.rnd.mendix.com/modelsdk/latest/index.html">reference documentation</see> on hand.
            </remarks>
            <seealso href="https://docs.mendix.com/apidocs-mxsdk/mxsdk/"/>
            <seealso href="https://apidocs.rnd.mendix.com/modelsdk/latest/classes/model.html"/>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.IModel.Root">
            <summary>
            Returns the app's model content.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Model.IModel.Create``1">
            <summary>
            Create a new model <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.IStructure">structure</see>.
            </summary>
            <typeparam name="T">Type of the structure to create. Abstract units and abstract elements are not supported.</typeparam>
            <returns>Create a new model <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.IStructure">structure</see>.</returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not a type from <see cref="N:Mendix.StudioPro.ExtensionsAPI"/> assembly.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><typeparamref name="T"/> can not be created, for example because it is abstract.</exception>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Model.IModel.Copy``1(``0)">
            <summary>
            Create a model <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.IStructure">structure</see> by deep copying the given <paramref name="source"/>.
            </summary>
            <typeparam name="T">Type of the structure to copy.</typeparam>
            <returns>Copy of the <paramref name="source"/>. It is not attached to a model.</returns>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Model.IModel.ToQualifiedName``1(System.String)">
            <summary>
            Create an object reference from its string representation.
            </summary>
            <remarks>
            Note, that this method returns a value even when the object reference is invalid. That is when no object of type <typeparamref name="T"/> exists in the
            app with the QualifiedName matching <paramref name="fullName"/>. In that case <see cref="M:Mendix.StudioPro.ExtensionsAPI.Model.IQualifiedName`1.Resolve"/> of the result would return
            <c>null</c>.
            </remarks>
            <param name="fullName">String representation of <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.IQualifiedName`1"/>.</param>
            <typeparam name="T">Type of object referenced by <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.IQualifiedName`1"/>.</typeparam>
            <returns>
            Created <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.IQualifiedName`1"/> which <see cref="P:Mendix.StudioPro.ExtensionsAPI.Model.IQualifiedName.FullName"/> equals <paramref name="fullName"/>. Note, that the reference might
            be invalid, and hence its <see cref="M:Mendix.StudioPro.ExtensionsAPI.Model.IQualifiedName`1.Resolve"/> method might return <c>null</c>.
            </returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not a type from <see cref="N:Mendix.StudioPro.ExtensionsAPI"/> assembly.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><typeparamref name="T"/> cannot be referenced.</exception>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Model.IModel.TryGetAbstractUnitById(System.String,Mendix.StudioPro.ExtensionsAPI.Model.IAbstractUnit@)">
            <summary>
            Get an IAbstractUnit by its unique identifier.
            </summary>
            <param name="abstractUnitId">
            Unique identifier of the abstractUnit
            </param>
            <param name="abstractUnit">
            Contains the retrieved IAbstractUnit if it is found, otherwise null.
            </param>
            <returns>True if the abstractUnit was retrieved, false if the abstractUnit could not be found.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="abstractUnitId"/> is null or empty or invalid.</exception>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Model.IModel.StartTransaction(System.String)">
             <summary>
             Create a transaction to wrap multiple model modifications together.
             </summary>
             <param name="description">
                 Description of the operation performed on the model. This description is visible to Studio Pro user in Edit -> Undo menu.
             </param>
             <returns><see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.ITransaction"/> representing the transaction.</returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="description"/> is null or empty.</exception>
             <exception cref="T:System.InvalidOperationException">Another transaction is already running.</exception>
             <remarks>
             Any modification to the model must be done within a transaction otherwise a <see cref="T:System.InvalidOperationException"/> is thrown. There can be only a
             single active (i.e. not committed or rolled back) <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.ITransaction"/> for the whole app.
            
             Transactions do not provide a way to isolate changes, but to group them. That is, any change to a model is immediately visible to all code working
             with the model. When transaction is rolled back programmatically or is undone by a user, all changes included in it are reverted.
             </remarks>
             <example>
             The most common use case for changing an app is to change one or few properties synchronously. Then we advice the following construct:
             <code>
             using (var transaction = model.StartTransaction("rename folder"))
             {
                 folder.Name = "New_Name";
                 transaction.Commit();
             }
             </code>
             </example>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.IQualifiedName`1">
            <summary>
            Represents a <see href="https://docs.mendix.com/apidocs-mxsdk/mxsdk/understanding-the-metamodel#3-1-references">by-name reference</see> to an object
            (element or unit) or type <typeparamref name="T"/>  in metamodel. The reference can be resolved to retrieve the object it is referencing.
            </summary>
            <remarks>
            Apps can contain invalid references, for example references to objects removed from the app. Such references are called invalid and they cannot
            be resolved even if an object they point to still exists in Studio Pro's memory.
            </remarks>
            <typeparam name="T">Type of the referenced object.</typeparam>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Model.IQualifiedName`1.Resolve">
            <summary>
            Retrieve the referenced object.
            </summary>
            <returns>The referenced object, if reference is valid. Null otherwise.</returns>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.IQualifiedName">
            <summary>
            Represents a <see href="https://docs.mendix.com/apidocs-mxsdk/mxsdk/understanding-the-metamodel#3-1-references">by-name reference</see> to an object
            (element or unit) in metamodel. The type of the referenced object is not statically known.
            </summary>
            <remarks>
            Apps can contain invalid references, for example references to objects removed from the app. Such references are called invalid and they cannot
            be resolved even if an object they point to still exists in Studio Pro's memory.
            </remarks>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.IQualifiedName.Name">
            <summary>
            Name of the referenced object. For example <c>MyHomePage</c>.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.IQualifiedName.FullName">
            <summary>
            Fully qualified name of the referenced object. For example <c>MyFirstModule.MyHomePage</c>.
            </summary>
            <remarks><see cref="P:Mendix.StudioPro.ExtensionsAPI.Model.IQualifiedName.FullName"/> is globally unique.</remarks>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.IReferableStructure">
            <summary>
            Represents any model object that is referable by-name, i.e. where the concrete type has a <code>QualifiedName</code> property, such as <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Constants.IConstant"/> and <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity"/>.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.IStructure">
            <summary>
            Representation of a single <see href="https://docs.mendix.com/apidocs-mxsdk/mxsdk/understanding-the-metamodel#1-units">unit</see> or <see href="https://docs.mendix.com/apidocs-mxsdk/mxsdk/understanding-the-metamodel#2-elements">element</see> in metamodel.
            All instances of <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.IAbstractUnit"/> and <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.IElement"/> implement this interface.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.ITransaction">
             <summary>
             Transaction grouping the changes in the app model.
             </summary>
             <remarks>
             Transactions provide a way to group changes together and to give a user-friendly name for these changes (visible in Edit -> Undo menu). Transactions
             must be committed or rolled back where the latter one can be achieved by explicitly calling <see cref="M:Mendix.StudioPro.ExtensionsAPI.Model.ITransaction.Rollback"/> or by implicit call to
             <see cref="M:System.IDisposable.Dispose"/> e.g. due to an exception being thrown. Committed transaction can later be reverted by a user using undo.
            
             Changes done within a transaction are not isolated, that is other parts of Studio Pro code, including editors, react to them even before
             <see cref="M:Mendix.StudioPro.ExtensionsAPI.Model.ITransaction.Commit"/> is called. It is not recommended to have transactions active while a user can interact with Studio Pro screens different from the
             one you control.
             </remarks>
             <example>
             Transactions can be created using <see cref="M:Mendix.StudioPro.ExtensionsAPI.Model.IModel.StartTransaction(System.String)"/>.
             </example>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Model.ITransaction.Commit">
            <summary>
            Commit the transaction. That indicates that an atomic set of changes is completed and: saves all affected documents that are not currently being
            edited by a user; adds an undo item for the documents that are edited.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Model.ITransaction.Rollback">
            <summary>
            Roll back the transaction. That is, undo all changes done during it.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.Location">
            <summary>
            This record represents a set of two-dimensional coordinates.
            </summary>
            <param name="X">X axis coordinate.</param>
            <param name="Y">Y axis coordinate.</param>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Model.Location.#ctor(System.Int32,System.Int32)">
            <summary>
            This record represents a set of two-dimensional coordinates.
            </summary>
            <param name="X">X axis coordinate.</param>
            <param name="Y">Y axis coordinate.</param>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.Location.X">
            <summary>X axis coordinate.</summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.Location.Y">
            <summary>Y axis coordinate.</summary>
        </member>
        <member name="F:Mendix.StudioPro.ExtensionsAPI.Model.Location.Empty">
            <summary>
            Create a location object with a set of default coordinates.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.MicroflowExpressions.IMicroflowExpression">
            <summary>
            Represents a microflow expression like "$employee/Name".
            </summary>
            <remarks>
            This type is read-only. To create new <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.MicroflowExpressions.IMicroflowExpression"/> use <see cref="M:Mendix.StudioPro.ExtensionsAPI.Services.IMicroflowExpressionService.CreateFromString(System.String)"/>.
            </remarks>
            <see href="https://docs.mendix.com/studio/expressions"/>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.MicroflowExpressions.IMicroflowExpression.Text">
            <summary>
            Returns the string representation of the expression.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.Microflows.IMicroflow">
            <summary>
            Representation of a single <see href="https://docs.mendix.com/apidocs-mxsdk/mxsdk/microflows-metamodel">microflow</see> in a metamodel.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Model.Microflows.IMicroflowAction.CalculateScopeVariables">
            <summary>
            Processes model changes and retrieves available scope variables for this Microflow Action
            </summary>
            <returns>a List of Scope Variables accessible by this Microflow Action</returns>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Model.Microflows.IMicroflowAction.CreateExpressionContext(Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.DataType[])">
            <summary>
            Creates the expression context of this microflow action.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Model.Microflows.IMicroflowAction.GetMicroflow">
            <summary>
            It returns the microflow container of this action.
            </summary>
            <returns>The containing <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Microflows.IMicroflow"/>.</returns>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.Microflows.IMicroflowExpressionContext">
            <summary>
            The expression context of a microflow action.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.Microflows.MicroflowActionExtension`1">
            <summary>
            Base class for an extension that manages a custom microflow action.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Model.Microflows.MicroflowActionExtension`1.GetCaption(`0)">
            <summary>
            This function allows to return a custom caption for the action. It will be what shows when the action is inserted in the flow.
            </summary>
            <param name="action">The <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Microflows.IMicroflowAction"/> of this extension.</param>
            <returns>The caption for the action/>.</returns> 
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Model.Microflows.MicroflowActionExtension`1.GetUsedVariables(`0)">
            <summary> 
            This function has to be implemented to provide all the variables that the microflow action uses.
            </summary>
            <param name="action">The <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Microflows.IMicroflowAction"/> of this extension.</param>
            <returns>A list of <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Microflows.VariableUsage"/>.</returns>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Model.Microflows.MicroflowActionExtension`1.GetExpressions(`0)">
            <summary>
            This function has to be implemented to provide all the expressions that the microflow action uses.
            </summary>
            <param name="action">The <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Microflows.IMicroflowAction"/> of this extension.</param>
            <returns>A list of <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Microflows.ExpressionWithContext"/> representing a <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.MicroflowExpressions.IMicroflowExpression"/> and its <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Microflows.IMicroflowExpressionContext"/>.</returns>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.ModelInterfaceAttribute">
            <summary>
            Attribute indicating that a target interface represents a custom metamodel
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.Pages.IPage">
            <summary>
            Representation of a single <see href="https://docs.mendix.com/apidocs-mxsdk/mxsdk/pages-metamodel/">page</see> in the app model.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.Projects.IDocument">
            <summary>
            Representation of a single <see href="https://docs.mendix.com/apidocs-mxsdk/mxsdk/projects-metamodel#2-2-documents">document</see> in metamodel.
            This is an abstract unit, so all instances of <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Projects.IDocument"/> also implement more concrete interface like <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Microflows.IMicroflow"/>.
            </summary>
            <remarks>Note that a document can be marked as <see cref="P:Mendix.StudioPro.ExtensionsAPI.Model.Projects.IDocument.Excluded"/>. Such documents should be ignored for the majority of operations.</remarks>
            <seealso href="https://docs.mendix.com/apidocs-mxsdk/mxsdk/projects-metamodel#2-2-documents"/>
            <seealso href="https://apidocs.rnd.mendix.com/modelsdk/latest/classes/projects.document.html"/>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.Projects.IDocument.Name">
            <summary>
            Name of the document.
            </summary>
            <remarks>Note that changing a name of the document renames it. That is, all by-name reference to that document are updated.</remarks>
            <exception cref="T:System.ArgumentException">New value is not valid for this document type or is not unique.</exception>
            <exception cref="T:System.InvalidOperationException">Value is changed when not inside a <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.ITransaction"/>.</exception>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.Projects.IFolder.Name">
            <summary>
            Name of the document.
            </summary>
            <exception cref="T:System.ArgumentException">New value is not valid for this document type or is not unique.</exception>
            <exception cref="T:System.InvalidOperationException">Value is changed when not inside a <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.ITransaction"/>.</exception>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.Projects.IModule">
            <summary>
            Representation of a single <see href="https://docs.mendix.com/apidocs-mxsdk/mxsdk/projects-metamodel#2-modules">module</see> in metamodel.
            </summary>
            <seealso href="https://docs.mendix.com/apidocs-mxsdk/mxsdk/projects-metamodel#2-modules"/>
            <seealso href="https://apidocs.rnd.mendix.com/modelsdk/latest/classes/projects.module.html"/>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.Projects.IModule.QualifiedName">
            <summary>
            <see href="https://docs.mendix.com/apidocs-mxsdk/mxsdk/understanding-the-metamodel#3-1-references">By-name reference</see> to the module.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.Projects.IModule.Name">
            <summary>
            Name of the module.
            </summary>
            <remarks>
            Note that changing a name of the module renames it. That is, all by-name reference to that module or documents inside it are updated.
            </remarks>
            <exception cref="T:System.ArgumentException">New value is not valid for this document type or is not unique.</exception>
            <exception cref="T:System.InvalidOperationException">Value is changed when not inside a <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.ITransaction"/>.</exception>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.Projects.IProject">
            <summary>
            Representation of a whole <see href="https://docs.mendix.com/apidocs-mxsdk/mxsdk/projects-metamodel">app</see> in metamodel.
            </summary>
            <seealso href="https://docs.mendix.com/apidocs-mxsdk/mxsdk/projects-metamodel"/>
            <seealso href="https://apidocs.rnd.mendix.com/modelsdk/latest/classes/projects.project.html"/>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.Projects.IProject.Name">
            <summary>
            Display name of the app.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.Projects.IProject.DirectoryPath">
            <summary>
            Full path to app location on the file system.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Model.Projects.IProject.GetModules">
            <summary>
            Returns the <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Projects.IModule"/>s contained by the app model at this moment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Model.Projects.IProject.GetProjectDocuments">
            <summary>
            Returns the <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Projects.IProjectDocument"/>s contained by the app model at this moment. That includes <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Settings.IProjectSettings"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.Texts.IText">
             <summary>
             Represents a translatable text in a Mendix app.
            
             Translatable texts are mainly used in user-facing places in the app, for example on Pages and in Microflows where the end-user of the app will see the text.
             </summary>
             <remarks>
             A translatable text contains a list of translations, which map from a language code, representing the language of the translation, to the actual text.
             There can be duplicate translations for a particular language code, but this will lead to a consistency error in the model.
             The methods of this class try to prevent creating duplicate translations.
             </remarks>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Model.Texts.IText.GetTranslations">
            <summary>
            Gets the list of translations for this translatable text.
            </summary>
            <returns>A read-only list of <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Texts.ITranslation"/> instances.</returns>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Model.Texts.IText.AddOrUpdateTranslation(System.String,System.String)">
            <summary>
            Adds or updates a translation for the specified language code.
            </summary>
            <remarks>
            When a translation for the specified language code already exists, the text of that translation is updated.
            Otherwise, a new translation is created with the specified language code and text.
            </remarks>
            <param name="languageCode">The language code for the translation.</param>
            <param name="text">The text for the translation.</param>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Model.Texts.IText.RemoveTranslation(System.String)">
            <summary>
            Removes any translations for the specified language code from this translatable text.
            </summary>
            <param name="languageCode">The language code for which to remove the translations.</param>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Model.Texts.ITranslation">
            <summary>
            Represents a single translation of a translatable text.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.Texts.ITranslation.LanguageCode">
            <summary>
            The language code representing the language for this translation.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Model.Texts.ITranslation.Text">
            <summary>
            The text of the translation.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Services.IBackgroundJobService">
            <summary>
            Provides methods to run background jobs with separate steps.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Services.IBackgroundJobService.Run(Mendix.StudioPro.ExtensionsAPI.BackgroundJobs.BackgroundJob)">
            <summary>
            It runs a <see cref="T:Mendix.StudioPro.ExtensionsAPI.BackgroundJobs.BackgroundJob"/> which contains a series of <see cref="T:Mendix.StudioPro.ExtensionsAPI.BackgroundJobs.BackgroundJobStep"/> that will be executed in the order they are supplied.
            The dialog will highlight the current step being executed and shows a progress bar.
            </summary>
            <param name="job">The background job which will be executed by running each of its steps.</param>
            <exception cref="T:System.Exception">
            <paramref name="job"/> is null.
            </exception>
            <returns>true or false depending on the success of the steps performed as a whole.</returns>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Services.IConfigurationService">
            <summary>
            Provides access to the global Studio Pro configurations that can depend on environment or user-defined settings.
            </summary>
            <remarks>The same information is accessible through <see cref="P:Mendix.StudioPro.ExtensionsAPI.ExtensionBase.Configuration"/> property.</remarks>
            <seealso cref="P:Mendix.StudioPro.ExtensionsAPI.Services.IConfigurationService.Configuration"/>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Services.IConfigurationService.Configuration">
            <summary>
            Current Studio Pro <see cref="T:Mendix.StudioPro.ExtensionsAPI.IConfiguration"/>.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Services.IDomainModelService">
            <summary>
            It provides methods to retrieve associations between entities in the model.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Services.IDomainModelService.GetAllAssociations(Mendix.StudioPro.ExtensionsAPI.Model.IModel,Mendix.StudioPro.ExtensionsAPI.Model.Projects.IModule[])">
            <summary>
            It returns all <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.EntityAssociation"/> in the current app.
            </summary>
            <param name="currentApp">The current app.</param>
            <param name="modules">The list of <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Projects.IModule"/> to search from. If none supplied, all will be searched.</param>
            <returns>List of <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.EntityAssociation"/></returns>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Services.IDomainModelService.GetAssociationsBetweenEntities(Mendix.StudioPro.ExtensionsAPI.Model.IModel,Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity,Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity)">
            <summary>
            It returns all <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.EntityAssociation"/> in the current app between two <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity"/> objects when one entity is the parent and the other is the child.
            </summary>
            <param name="currentApp">The current app.</param>
            <param name="parent">The <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity"/> which is the parent of the <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IAssociation"/>.</param>
            <param name="child">The <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity"/> which is the child of the <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IAssociation"/>.</param>
            <returns>List of <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.EntityAssociation"/></returns>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Services.IDomainModelService.GetAnyAssociationsBetweenEntities(Mendix.StudioPro.ExtensionsAPI.Model.IModel,Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity,Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity)">
            <summary>
            It returns all <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.EntityAssociation"/> in the current app between two <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity"/> objects when both entities supplied are either the parent and the child.
            </summary>
            <param name="currentApp">The current app.</param>
            <param name="entity1">One <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity"/> on one side of the <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IAssociation"/>.</param>
            <param name="entity2">The other <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity"/> on one side of the <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IAssociation"/>.</param>
            <returns>List of <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.EntityAssociation"/></returns>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Services.IDomainModelService.GetAssociationsOfEntity(Mendix.StudioPro.ExtensionsAPI.Model.IModel,Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity,Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.AssociationDirection)">
            <summary>
            It returns all <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.EntityAssociation"/> in the current app where the <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity"/> supplied is the parent or the child, determined by the <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.AssociationDirection"/>.
            </summary>
            <param name="currentApp">The current app.</param>
            <param name="entity">The <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity"/> which is either the parent or child (or both) of an <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IAssociation"/>.</param>
            <param name="associationDirection">The direction of the association to filter by. It can be either <see cref="F:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.AssociationDirection.Parent"/>, <see cref="F:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.AssociationDirection.Child"/> or <see cref="F:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.AssociationDirection.Both"/>.</param>
            <returns></returns>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Services.IExtensionFileService">
            <summary>
            Provides filesystem operations specific to an extension.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Services.IExtensionFileService.ResolvePath(System.String[])">
            <summary>
            Returns the full path to a file included in the calling extension, relative to the root directory containing the extension.
            </summary>
            <param name="pathSegments">Segments of the path to the file inside the root directory of the extension. E.g. "config"(directory),"config.json"(file)</param>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Services.IHttpClientService">
            <summary>
            Provides access to the HttpClientFactory from Studio Pro, which manages the usage of the HTTP Client Handler across the application.
            This prevents socket allocation exhaustion, which can cause undesirable application behavior.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Services.IHttpClientService.CreateHttpClient">
            <summary>
            Let Studio Pro create an HttpClient that manages socket allocation robustly within the application.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Services.ILogService">
            <summary>
            Provides access to the logging system of Studio Pro to log messages from extensions. Each message is by default decorated with the caller method name and the caller file path.
            This can be overriden in the method calls.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Services.ILogService.Debug(System.String,System.String,System.String)">
            <summary>
            Logs a message at DEBUG log level.
            </summary>
            <param name="message">the message</param>
            <param name="memberName">optional member name, of the method or property where the message originates from. Uses [CallerMemberName] by default.</param>
            <param name="filePath">optional file path of the file where the message originates from. Uses [CallerFilePath] by default.</param>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Services.ILogService.Info(System.String,System.String,System.String)">
            <summary>
            Logs a message at INFO log level.
            </summary>
            <param name="message">the message</param>
            <param name="memberName">optional member name, of the method or property where the message originates from. Uses [CallerMemberName] by default.</param>
            <param name="filePath">optional file path of the file where the message originates from. Uses [CallerFilePath] by default.</param>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Services.ILogService.Warn(System.String,System.String,System.String)">
            <summary>
            Logs a message at WARNING log level.
            </summary>
            <param name="message">the message</param>
            <param name="memberName">optional member name, of the method or property where the message originates from. Uses [CallerMemberName] by default.</param>
            <param name="filePath">optional file path of the file where the message originates from. Uses [CallerFilePath] by default.</param>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Services.ILogService.Error(System.String,System.Exception,System.String,System.String)">
            <summary>
            Logs a message at ERROR log level.
            </summary>
            <param name="message">the message</param>
            <param name="exception">the exception to log. if exception is null, it will not be logged.</param>
            <param name="memberName">optional member name, of the method or property where the message originates from. Uses [CallerMemberName] by default.</param>
            <param name="filePath">optional file path of the file where the message originates from. Uses [CallerFilePath] by default.</param>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Services.IMicroflowExpressionService">
            <summary>
            Provides a set of operations on a <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.MicroflowExpressions.IMicroflowExpression">Microflow Expression</see>.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Services.IMicroflowExpressionService.CreateFromString(System.String)">
            <summary>
            Create new <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.MicroflowExpressions.IMicroflowExpression"/> from a string <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Services.IMicroflowExpressionService.TryGetComputedType(Mendix.StudioPro.ExtensionsAPI.Model.IModel,Mendix.StudioPro.ExtensionsAPI.Model.MicroflowExpressions.IMicroflowExpression,Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.DataType@)">
             <summary>
             Retrieve the type of the <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.MicroflowExpressions.IMicroflowExpression"/>, if it has been computed.
             </summary>
             <param name="model">Reference to the current app.</param>
             <param name="microflowExpression">
             Microflow expression which type should be determined. It must be a property of an elements that is added to the app model.
             </param>
             <param name="dataType">
             Type of <paramref name="microflowExpression"/> represented by a <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.DataType"/>, or <c>null</c> if it hasn't been computed.
             </param>
             <returns>
             Returns <c>true</c> if data type of the expression is known and <c>false</c> otherwise.
             </returns>
             <remarks>
             Note, that <c>false</c> result can be intermittent and executing <see cref="M:Mendix.StudioPro.ExtensionsAPI.Services.IMicroflowExpressionService.TryGetComputedType(Mendix.StudioPro.ExtensionsAPI.Model.IModel,Mendix.StudioPro.ExtensionsAPI.Model.MicroflowExpressions.IMicroflowExpression,Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.DataType@)"/> again at a later point in time might succeed.
             </remarks>
             <example>
             To read the type of an existing expression:
             <code>
             if (!microflowExpressionOperator.TryGetComputedType(model, modelElement.Property, out var dataType))
                 throw new InvalidOperationException();
             switch (dataType)
             {
                 case IStringType:
                     return "string";
                 case IObjectType objectType:
                     return $"object of type {objectType.Entity}";
                 // etc
             }
             </code>
            
             This method will never return <c>true</c> when called with an expression that is not part of a model:
             <code>
             if (microflowExpressionOperator.TryGetComputedType(model, microflowExpressionOperator.CreateFromString(newExpressionValue), out var dataType))
             {
                 // this code will never execute
             }
             </code>
            
             Nor will it work with an expression that has been just assigned to the app model:
             <code>
             modelElement.Property = microflowExpressionOperator.CreateFromString(newExpressionValue);;
             if (microflowExpressionOperator.TryGetComputedType(model, modelElement.Property, out var dataType))
             {
                 // this code will never execute
             }
             </code>
            
             If you need to read the type after setting it, use the following approach:
             <code>
             using var tx = model.StartTransaction("Change argument");
             modelElement.Property = microflowExpressionOperator.CreateFromString(newExpressionValue);;
             tx.Commit(); // this line is required
            
             if (microflowExpressionOperator.TryGetComputedType(model, modelElement.Property, out var dataType))
             {
                 // use dataType
             }
             });
             </code>
             </example>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Services.IMicroflowService">
            <summary>
            Provides a set of operations on a Microflow.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Services.IMicroflowService.Initialize(Mendix.StudioPro.ExtensionsAPI.Model.Microflows.IMicroflow,System.ValueTuple{System.String,Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.DataType}[])">
            <summary>
            Initializes an empty microflow with start and end nodes and the specified <paramref name="parameters"/>. It uses ReturnType property of <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Microflows.IMicroflow"/> to set the Return Type./>.
            The microflow must be added to the app model first before this method can be used.
            </summary>
            <param name="microflow">Microflow which is initialized.</param>
            <param name="parameters">List of parameters that are set in the microflow.</param>
            <exception cref="T:System.InvalidOperationException">Microflow is not added to the app model.</exception>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Services.IMicroflowService.CreateMicroflow(Mendix.StudioPro.ExtensionsAPI.Model.IModel,Mendix.StudioPro.ExtensionsAPI.Model.Projects.IFolderBase,System.String,Mendix.StudioPro.ExtensionsAPI.Model.Microflows.MicroflowReturnValue,System.ValueTuple{System.String,Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.DataType}[])">
            <summary>
            Creates a microflow and adds it to its containing folder. It initializes it with start and end nodes and the specified <paramref name="parameters"/>. It uses ReturnType property of <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Microflows.IMicroflow"/> to set the Return Type and its value, using the <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Microflows.MicroflowReturnValue"/> parameter./>.
            The microflow must be added to the app model first before this method can be used.
            </summary>
            <param name="model">The model in which the microflow will be created.</param>
            <param name="container">The folder or module in which the microflow will be added.</param>
            <param name="name">The name of the microflow.</param>
            <param name="returnValue">The <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Microflows.MicroflowReturnValue"/> of the microflow. It has a <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.DataType"/> for the return type and a <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.MicroflowExpressions.IMicroflowExpression"/> for the return value. If not passed in, the return value will default to <see cref="P:Mendix.StudioPro.ExtensionsAPI.Model.DataTypes.DataType.Void"/> without a return value.</param>
            <param name="parameters">List of parameters that are set in the microflow.</param>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Services.IMicroflowService.TryInsertAfterStart(Mendix.StudioPro.ExtensionsAPI.Model.Microflows.IMicroflow,Mendix.StudioPro.ExtensionsAPI.Model.Microflows.IActivity[])">
            <summary>
            Inserts <paramref name="activities"/> in the microflow directly after the start event.
            </summary>
            <param name="microflow">Microflow to which <paramref name="activities"/> are added.</param>
            <param name="activities">List of activities to add after the start event.</param>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Services.IMicroflowService.TryInsertBeforeActivity(Mendix.StudioPro.ExtensionsAPI.Model.Microflows.IActivity,Mendix.StudioPro.ExtensionsAPI.Model.Microflows.IActivity[])">
            <summary>
            Inserts <paramref name="activities"/> in a microflow directly before the <paramref name="insertBeforeActivity"/>.
            This <paramref name="insertBeforeActivity"/> must be connected in the microflow and must contain exactly 1 incoming <a href="https://docs.mendix.com/refguide/sequence-flow">SequenceFlow</a>.
            </summary>
            <param name="insertBeforeActivity">The activity in the microflow to act as reference point to insert the <paramref name="activities"/>.</param>
            <param name="activities">List of activities to add before the <paramref name="insertBeforeActivity"/> activity.</param>
            <returns>Returns false if it does not have exactly 1 incoming <a href="https://docs.mendix.com/refguide/sequence-flow">SequenceFlow</a>.</returns>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Services.IMicroflowService.GetParameters(Mendix.StudioPro.ExtensionsAPI.Model.Microflows.IMicroflow)">
            <summary>
            Get all parameters of a microflow.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Services.IMicroflowService.GetAllMicroflowActivities(Mendix.StudioPro.ExtensionsAPI.Model.Microflows.IMicroflow)">
            <summary>
            Get all activities of a microflow that are exposed as <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Microflows.IActivity"/> in the API, including nested activities (loop).
            Order and nesting of activities cannot be determined from the result.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Services.IMicroflowService.UpdateActionAfterRename(Mendix.StudioPro.ExtensionsAPI.Model.IModel,Mendix.StudioPro.ExtensionsAPI.Model.Microflows.IMicroflowAction,System.Func{System.ValueTuple{System.String,System.String}})">
            <summary>
            When a variable is renamed, this method needs to be called to update all the usages and references to it.
            </summary>
            <param name="model">The current app known to the extension.</param>
            <param name="microflowAction">The <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Microflows.IMicroflowAction"/> containing the variable to update.</param>
            <param name="rename">The actual updating of the name of the variable from the action. The extension has to provide the method. It needs to return the old name and the new name of the variable.</param>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Services.IMicroflowService.IsVariableNameInUse(Mendix.StudioPro.ExtensionsAPI.Model.Microflows.IMicroflow,System.String)">
            <summary>
            It verifies if variable name has already been used in the <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Microflows.IMicroflow"/>.
            </summary>
            <param name="microflow">The microflow which contains the variables to check against.</param>
            <param name="variableName">The name of the variable used to search for existing variable.</param>
            <returns>True if the variable name matches the name of one of the existing variables in the microflow./></returns>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Services.INameValidationService">
            <summary>
            Provides validation functionality for names of model elements.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Services.INameValidationService.GetValidName(System.String)">
            <summary>
            Generates a valid name based on the <paramref name="candidateName"/> that you provide.
            </summary>
            <param name="candidateName">The initial version of the Name that will be used in validation process.</param>
            <returns>A valid name.</returns>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Services.INameValidationService.IsNameValid(System.String)">
            <summary>
            Checks if the provided <paramref name="name"/> is valid.
            </summary>
            <param name="name">The name that you wish to be checked.</param>
            <returns>A <see cref="T:Mendix.StudioPro.ExtensionsAPI.Services.ValidationResult"/> containing the validity status and the error message that can be used if needed.</returns>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Services.INavigationManagerService">
            <summary>
            Provides access to the navigation profiles of a Mendix app
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Services.INavigationManagerService.PopulateWebNavigationWith(Mendix.StudioPro.ExtensionsAPI.Model.IModel,System.ValueTuple{System.String,Mendix.StudioPro.ExtensionsAPI.Model.Pages.IPage}[])">
            <summary>
            Allows to add page shortcuts to a navigation profile
            </summary>
            <param name="model">The model to which you are going to add the navigation items</param>
            <param name="pages">A parameterized array of pages that are going to be added to the responsive web navigation profile</param>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Services.IPageGenerationService">
            <summary>
            Provides access to the page generation features of the StudioPro
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Services.IPageGenerationService.GenerateOverviewPages(Mendix.StudioPro.ExtensionsAPI.Model.Projects.IModule,System.Collections.Generic.IEnumerable{Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity},System.Boolean)">
            <summary>
            Generate edit and summary pages for the specified entities of a module.
            </summary>
            <remarks>
            This API requires at least one layout of type Responsive and one layout of type Popup or ModalPopup to be present in the App model.
            These layouts will be used for the generated pages.
            </remarks>
            <param name="module">Module in which the OverviewPages folder and the pages themselves will be generated.</param>
            <param name="entities">Entities based upon which the overview pages will be generated.</param>
            <param name="generateIndexSnippet">Specifies whether an index snippet for the entities should be generated. An index snippet is only generated if more than one entity is passed into <paramref name="entities"/></param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="module"/> or <paramref name="entities"/> is <code>null</code>.</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="entities"/> is an empty list or one or more of the entities has no attributes.</exception>
            <exception cref="T:System.InvalidOperationException">When the required layouts are not found in the App model.</exception>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Services.ISecretManagerService">
            <summary>
            Allows retrieving and storing app-specific secrets.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Services.ISecretManagerService.GetValue(Mendix.StudioPro.ExtensionsAPI.Model.IModel,Mendix.StudioPro.ExtensionsAPI.Services.SecretManagerKey)">
            <summary>
            Gets the value of a secret.
            </summary>
            <param name="model">Reference to the current model.</param>
            <param name="key">The key to the secret.</param>
            <returns>A secure string containing the value of the secret, or null when there is no secret for this key.</returns>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Services.ISecretManagerService.SetValue(Mendix.StudioPro.ExtensionsAPI.Model.IModel,Mendix.StudioPro.ExtensionsAPI.Services.SecretManagerKey,System.Security.SecureString)">
            <summary>
            Sets a value of a secret.
            </summary>
            <param name="model">Reference to the current model.</param>
            <param name="key">The key to the secret.</param>
            <param name="value">The value of the secret to be stored, or null to indicate that there is no secret for this key.</param>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Services.ISoapClientService">
            <summary>
            Allows creating SOAP service clients set up using the standard configuration from Studio Pro,
            which manages proxy connections, timeouts, max buffer size etc.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Services.ISoapClientService.CreateClient``2(System.ServiceModel.EndpointAddress)">
            <summary>
            Let Studio Pro create a SOAP service client that manages client configuration robustly within the application.
            </summary>
            <typeparam name="TClient">Type of a client to create.</typeparam>
            <typeparam name="TPortType">Type of a client's contract.</typeparam>
            <param name="endpointAddress">Service URL as an <see cref="T:System.ServiceModel.EndpointAddress" />.</param>
            <returns>An instance of <typeparamref name="TClient" />.</returns>
            <example>
            Given the following generated code for a SOAP service:
            <code>
            internal partial class MyServicePortTypeClient : System.ServiceModel.ClientBase&lt;MyServicePortType&gt;, MyServicePortType
            </code>
            The user of this API can create an instance of the client configured in accordance with Studio Pro rules as such:
            <code>
            var client = soapClientService.CreateClient&lt;MyServicePortTypeClient, MyServicePortType&gt;(new EndpointAddress(serviceUrl));
            </code>
            </example>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Services.SecretManagerKey">
            <summary>
            Represents a key for storing a secret in <see cref="T:Mendix.StudioPro.ExtensionsAPI.Services.ISecretManagerService"/>.
            </summary>
            <param name="Category">The secret's category, uniquely identifying the type of secret within Studio Pro across all extensions.</param>
            <param name="Identifier">A unique identifier within the category.</param>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Services.SecretManagerKey.#ctor(System.String,System.String)">
            <summary>
            Represents a key for storing a secret in <see cref="T:Mendix.StudioPro.ExtensionsAPI.Services.ISecretManagerService"/>.
            </summary>
            <param name="Category">The secret's category, uniquely identifying the type of secret within Studio Pro across all extensions.</param>
            <param name="Identifier">A unique identifier within the category.</param>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Services.SecretManagerKey.Category">
            <summary>The secret's category, uniquely identifying the type of secret within Studio Pro across all extensions.</summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Services.SecretManagerKey.Identifier">
            <summary>A unique identifier within the category.</summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.Services.ValidationResult">
            <summary>
            Validation result that is returned by the validation api.
            </summary>
            <param name="IsValid">Was the validation successful.</param>
            <param name="ErrorMessage">Why did the validation fail.</param>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.Services.ValidationResult.#ctor(System.Boolean,System.String)">
            <summary>
            Validation result that is returned by the validation api.
            </summary>
            <param name="IsValid">Was the validation successful.</param>
            <param name="ErrorMessage">Why did the validation fail.</param>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Services.ValidationResult.IsValid">
            <summary>Was the validation successful.</summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.Services.ValidationResult.ErrorMessage">
            <summary>Why did the validation fail.</summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.DataHub.DataHubPaneExtension">
            <summary>
            Base class for an extension that adds new items into <see href="https://docs.mendix.com/refguide/data-hub-pane/">Integration pane</see>.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.DataHub.DataHubPaneExtension.CollectUsedServicesAsync(System.Threading.CancellationToken)">
            <summary>
            Collect services already used by the <see cref="P:Mendix.StudioPro.ExtensionsAPI.UI.UIExtensionBase.CurrentApp"/> to be presented in Integration pane.
            </summary>
            <param name="cancellationToken">Cancellation to signal that the result of current operation is not needed anymore.</param>
            <returns>List of <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.DataHub.DataHubService"/> representing services used in the <see cref="P:Mendix.StudioPro.ExtensionsAPI.UI.UIExtensionBase.CurrentApp"/>.</returns>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.DataHub.DataHubPaneExtension.SearchServicesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Search for services in response to Studio Pro user input to be presented in Integration pane.
            </summary>
            <remarks>
            <see cref="M:Mendix.StudioPro.ExtensionsAPI.UI.DataHub.DataHubPaneExtension.SearchServicesAsync(System.String,System.Threading.CancellationToken)"/> might be called multiple times in parallel, e.g. once for each user key stroke. Only the result for the actual
            visible <paramref name="searchTerm"/> will be displayed.
            </remarks>
            <param name="searchTerm">Search term entered by Studio Pro user so far.</param>
            <param name="cancellationToken">Cancellation to signal that the result of current operation is not needed anymore.</param>
            <returns>List of <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.DataHub.DataHubService"/> representing services found by the search.</returns>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.DataHub.DataHubService">
            <summary>
            Representation of a single service in the <see href="https://docs.mendix.com/refguide/data-hub-pane/">Integration pane</see>. It is immutable.
            </summary>
            <param name="UniqueId">Unique identifier of this service. Used internally.</param>
            <param name="Name">User-visible name of the service.</param>
            <param name="Icon">Icon to show next to the service.</param>
            <param name="Version">Version of the service. Showed as a secondary info under the service. Can be empty.</param>
            <param name="EnvironmentName">Name of the environment where the service is deployed. Showed as a secondary info under the service. Can be empty.</param>
            <param name="DocumentLocation">DocumentLocation of the service. This location is used as a tooltip on the usage icon in the integration panel.</param>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.DataHub.DataHubService.#ctor(System.String,System.String,Eto.Drawing.Icon,System.String,System.String,System.String)">
            <summary>
            Representation of a single service in the <see href="https://docs.mendix.com/refguide/data-hub-pane/">Integration pane</see>. It is immutable.
            </summary>
            <param name="UniqueId">Unique identifier of this service. Used internally.</param>
            <param name="Name">User-visible name of the service.</param>
            <param name="Icon">Icon to show next to the service.</param>
            <param name="Version">Version of the service. Showed as a secondary info under the service. Can be empty.</param>
            <param name="EnvironmentName">Name of the environment where the service is deployed. Showed as a secondary info under the service. Can be empty.</param>
            <param name="DocumentLocation">DocumentLocation of the service. This location is used as a tooltip on the usage icon in the integration panel.</param>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.DataHub.DataHubService.UniqueId">
            <summary>Unique identifier of this service. Used internally.</summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.DataHub.DataHubService.Name">
            <summary>User-visible name of the service.</summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.DataHub.DataHubService.Icon">
            <summary>Icon to show next to the service.</summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.DataHub.DataHubService.Version">
            <summary>Version of the service. Showed as a secondary info under the service. Can be empty.</summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.DataHub.DataHubService.EnvironmentName">
            <summary>Name of the environment where the service is deployed. Showed as a secondary info under the service. Can be empty.</summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.DataHub.DataHubService.DocumentLocation">
            <summary>DocumentLocation of the service. This location is used as a tooltip on the usage icon in the integration panel.</summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.DataHub.DataHubService.Entities">
            <summary>
            Entities that this service contains represented as <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.DataHub.DataHubServiceEntity"/>.
            </summary>
            <example>
            Can be initialized as:
            <code>
            return new DataHubService("com.mendix.example.contracts.1", "Contracts", Icons.Service, "1.0.0", "Production")
            {
                Entities = { new DataHubServiceEntity("Contract") }
            }
            </code>
            </example>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.DataHub.DataHubService.GetInfoControl">
            <summary>
            Delegate invoked to create an optional control shown on the right of the service in Integration pane.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.DataHub.DataHubServiceEntity">
            <summary>
            Representation of a single entity introduced by a service in the <see href="https://docs.mendix.com/refguide/data-hub-pane/">Integration pane</see>. It is immutable.
            </summary>
            <param name="Name">Name of this entity.</param>
            <param name="ConsumedEntities">Consumed entities.</param>
            <param name="Icon">Icon to show next to the entity in Integration pane. Optional.</param>
            <param name="SupportedOperation">
            Indicate which operations can be performed with the entity. Translated to capability indicators next to the entity in Integration pane. Optional.
            </param>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.DataHub.DataHubServiceEntity.#ctor(System.String,System.Collections.Generic.List{Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity},Eto.Drawing.Icon,System.Nullable{Mendix.StudioPro.ExtensionsAPI.UI.DataHub.SupportedOperation})">
            <summary>
            Representation of a single entity introduced by a service in the <see href="https://docs.mendix.com/refguide/data-hub-pane/">Integration pane</see>. It is immutable.
            </summary>
            <param name="Name">Name of this entity.</param>
            <param name="ConsumedEntities">Consumed entities.</param>
            <param name="Icon">Icon to show next to the entity in Integration pane. Optional.</param>
            <param name="SupportedOperation">
            Indicate which operations can be performed with the entity. Translated to capability indicators next to the entity in Integration pane. Optional.
            </param>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.DataHub.DataHubServiceEntity.Name">
            <summary>Name of this entity.</summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.DataHub.DataHubServiceEntity.ConsumedEntities">
            <summary>Consumed entities.</summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.DataHub.DataHubServiceEntity.Icon">
            <summary>Icon to show next to the entity in Integration pane. Optional.</summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.DataHub.DataHubServiceEntity.SupportedOperation">
            <summary>
            Indicate which operations can be performed with the entity. Translated to capability indicators next to the entity in Integration pane. Optional.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.DataHub.DataHubServiceEntity.Attributes">
            <summary>
            Attributes that this entity contain represented as strings. They are shown as-is in Integration pane.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.DataHub.DataHubServiceEntity.OnInstantiate">
            <summary>
            Action invoked when an entity is dragged from the Integration pane to a Domain Model. Should create an
            <see href="https://docs.mendix.com/refguide/external-entities/">External</see> or regular <see href="https://docs.mendix.com/refguide/entities/">Entity</see>
            matching this <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.DataHub.DataHubServiceEntity"/> definition and associated with parent <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.DataHub.DataHubService"/>.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.Dialogs.ModalDialogViewModelBase">
            <summary>
            Representation of a modal popup dialog in Studio Pro. It is topmost and blocking.
            The only current allowed usage of this class is to implement the <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Dialogs.WebViewModalDialogViewModel"/> class,
            used to show a modal dialog containing a <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.WebView.IWebView"/> from <see cref="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.IDialogService.ShowDialog(Mendix.StudioPro.ExtensionsAPI.UI.Dialogs.ModalDialogViewModelBase)"/>.
            </summary>
            <remarks>A dialog can be opened with <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Services.IDialogService"/>.</remarks>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.Dialogs.ModalDialogViewModelBase.Title">
            <summary>
            Title of the dialog. Empty by default.
            </summary>
            <exception cref="T:System.ArgumentNullException">Passed value in the constructor is null or empty.</exception>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.Dialogs.ModalDialogViewModelBase.Height">
            <summary>
            The height of the dialog. If not provided, the dialog will have a default size. It can be changed while the dialog is open.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.Dialogs.ModalDialogViewModelBase.Width">
            <summary>
            The width of the dialog. If not provided, the dialog will have a default size.
            </summary>
            <remarks>The width of the dialog can only be set in the object initializer, as it is not applied dynamically to the dialog.</remarks>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.Dialogs.ModalDialogViewModelBase.OnClosed">
            <summary>
            Optional action to execute when the dialog is closed.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.Dialogs.ModalDialogViewModelBase.OnClosing">
            <summary>
            Optional action to execute when the user attempts to close the dialog.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.Dialogs.WebViewModalDialogViewModel">
            <summary>
            Representation of a modal popup dialog in Studio Pro. It is topmost and blocking.
            This modal popup dialog contains a <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.WebView.IWebView"/>.
            It derives from <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Dialogs.ModalDialogViewModelBase"/>, the type of the parameter in <see cref="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.IDialogService.ShowDialog(Mendix.StudioPro.ExtensionsAPI.UI.Dialogs.ModalDialogViewModelBase)"/>.
            </summary>
            <remarks>A dialog can be opened with <see cref="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.IDialogService.ShowDialog(Mendix.StudioPro.ExtensionsAPI.UI.Dialogs.ModalDialogViewModelBase)"/>.</remarks>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.DockablePane.DockablePaneExtension">
            <summary>
            Base class for an extension that introduces new <see href="https://docs.mendix.com/refguide/studio-pro-overview/#5-dockable-panes">dockable pane</see>.
            </summary>
            <remarks>
            Note that it is common to have a corresponding "View" top level menu item for each pane. Extension must introduce such item explicitly using
            <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuBarExtension"/> and <see cref="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.IDockingWindowService.OpenPane(System.String)"/>.
            </remarks>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.DockablePane.DockablePaneExtension.Id">
            <summary>
            Unique stable identifier of this pane. It is used internally and should always be the same.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.DockablePane.DockablePaneExtension.InitialPosition">
            <summary>
            The dock where the pane is opened initially, if it hasn't been opened before. By default <see cref="F:Mendix.StudioPro.ExtensionsAPI.UI.DockablePane.DockablePanePosition.Right"/>.
            </summary>
            <remarks>
            Studio Pro user can drag the dockable pane to another position. That position is persisted (based on <see cref="P:Mendix.StudioPro.ExtensionsAPI.UI.DockablePane.DockablePaneExtension.Id"/>) and has precedence
            over the <see cref="P:Mendix.StudioPro.ExtensionsAPI.UI.DockablePane.DockablePaneExtension.InitialPosition"/>.
            </remarks>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.DockablePane.DockablePaneExtension.Open">
            <summary>
            Create <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.DockablePane.DockablePaneViewModelBase"/> when a pane is opened.
            </summary>
            <remarks>
            This method is called every time when the pane is opened. Note that the pane can be opened automatically on extension load,
            if it has been previously opened by Studio Pro user.
            </remarks>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.DockablePane.DockablePaneViewModel">
            <summary>
            Representation of a <see href="https://docs.mendix.com/refguide/studio-pro-overview/#5-dockable-panes">dockable pane</see> in Studio Pro.
            </summary>
            <remarks>Dockable pane can be introduced through <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.DockablePane.DockablePaneExtension"/>.</remarks>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.DockablePane.DockablePaneViewModel.Controls">
            <summary>
            Content of the dockable pane.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.DockablePane.DockablePaneViewModelBase.OnClosed">
            <summary>
            Optional action to execute when the dockable pane is closed.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.DockablePane.DockablePaneViewModelBase.OnActivated">
            <summary>
            Optional action to execute when the dockable pane becomes active.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.DockablePane.DockablePaneViewModelBase.Title">
            <summary>
            Title of the pane displayed in its header. Empty by default.
            </summary>
            <exception cref="T:System.ArgumentNullException">Passed value is null or empty.</exception>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.DockablePane.DockablePaneViewModelBase.IsBadgeVisible">
            <summary>
            Indicates whether a "badge indicator" should be shown in the pane's tab header. False by default.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.DockablePane.DockablePaneViewModelBase.BadgeValue">
            <summary>
            Number displayed in "badge indicator". <c>0</c> by default.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.DockablePane.DockablePaneViewModelBase.BadgePriority">
            <summary>
            Color of "badge indicator". <see cref="F:Mendix.StudioPro.ExtensionsAPI.UI.DockablePane.DockablePaneBadgePriority.Normal"/> by default.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.DockablePane.WebViewDockablePaneViewModel">
            <summary>
            Representation of a <see href="https://docs.mendix.com/refguide/studio-pro-overview/#5-dockable-panes">dockable pane</see> in Studio Pro.
            This dockable pane is meant to contain a <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.WebView.IWebView"/>.
            </summary>
            <remarks>Dockable pane can be introduced through <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.DockablePane.DockablePaneExtension"/>.</remarks>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.Events.ExtensionLoaded">
            <summary>
            An event that occurs when an extension is loading.
            </summary>
            <remarks>
            This event occurs when an app that contains the extension is opened, as well as when an extension is added later to an open app, or is updated to a newer version.
            </remarks>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.Events.ExtensionUnloading">
             <summary>
             An event that occurs when an extension will be unloaded.
             </summary>
             <remarks>
             This event occurs when an app that contains the extension is closing, as well as when an extension is removed from the app, or before it is updated to a newer version.
            
             Note that this method is called when Studio Pro closes gracefully, but its execution is not guaranteed.
             </remarks>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.Events.IEvent">
            <summary>
            Interface for events that occur in Studio Pro.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.Events.IEventSubscription">
            <summary>
            Interface for event subscriptions.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.Menu.ContextMenuExtension`1">
            <summary>
            Base class for an extension that introduces new context menu items for model elements. Currently only elements of type <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity"/> and of type <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Projects.IDocument"/> are supported.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.Menu.ContextMenuExtension`1.StructureType">
            <summary>
            The type of the element for which this extension will generate context menus. Currently only elements of type <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity"/> and of type <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Projects.IDocument"/> are supported.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.Menu.ContextMenuExtension`1.GetContextMenus(`0)">
            <summary>
            Return <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuItemViewModel"/>s and <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Menu.SubMenuViewModel"/>s introduced by this extension.
            </summary>
            <returns>List of <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuItemViewModel"/> and <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Menu.SubMenuViewModel"/> introduced by this extension.</returns>
            <remarks>
            This method is called once an element of type <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity"/> is right-clicked.
            The menus this method returns will be inserted into the existing context menus and placed accordingly.
            </remarks>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuBarExtension">
            <summary>
            Base class for an extension that introduces new menu items into the menu bar.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuBarExtension.GetMenus">
            <summary>
            Return <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuItemViewModel"/>s and <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Menu.SubMenuViewModel"/>s introduced by this extension.
            </summary>
            <returns>List of <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuItemViewModel"/> and <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Menu.SubMenuViewModel"/> introduced by this extension.</returns>
            <remarks>
            This method is called once when the extension is initialized and must return all menus items, including disabled ones.
            A menu item can be enabled/disabled later (e.g. based on an event) using <see cref="P:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuViewModelBase.IsEnabled"/>.
            Menu items cannot be invisible.
            </remarks>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuItemViewModel">
             <summary>
             Representation of a regular menu item in one of sub-menus of the menu bar in Studio Pro.
             </summary>
             <remarks>
             Menu item can be introduced through <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuBarExtension"/>.
            
             If you need to place a menu item into new sub-menu, use <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Menu.SubMenuViewModel"/>. Note, that it should be returned from
             <see cref="M:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuBarExtension.GetMenus"/> earlier (e.g. on a smaller index) than this <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuItemViewModel"/>.
             </remarks>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuItemViewModel.#ctor(System.String,System.Collections.Generic.IReadOnlyList{System.String},System.String,Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuSeparator,Eto.Forms.Keys)">
            <summary>
            Construct new <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuItemViewModel"/>.
            </summary>
            <param name="caption">Caption of the menu. It can be changed later via <see cref="P:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuViewModelBase.Caption"/> property.</param>
            <param name="placeUnder">
            Path to the menu item into which the current menu should be placed. For example, <c>new[] { "app", "tools" }</c>.
            </param>
            <param name="placeAfter">
            Name of the menu item after which the current menu should be placed. Or <c>null</c> to place it on top.
            </param>
            <param name="separator">
            Indicates whether a menu separator should be placed <see cref="F:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuSeparator.Before"/> or <see cref="F:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuSeparator.After"/> this menu item.
            </param>
            <param name="shortcutKey">Optional global shortcut for this menu item.</param>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuItemViewModel.ShortcutKey">
            <summary>
            Optional global shortcut for this menu item. <see cref="F:Eto.Forms.Keys.None"/> by default.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuItemViewModel.Action">
            <summary>
            Action to execute when the menu is clicked. Empty operation by default.
            </summary>
            <exception cref="T:System.ArgumentNullException">Passed value is null.</exception>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuViewModelBase">
            <summary>
            Representation of a menu item in the menu bar of Studio Pro or one of its sub-menus. Use concrete classes <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuItemViewModel"/> or
            <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Menu.SubMenuViewModel"/> to create menus in <see cref="M:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuBarExtension.GetMenus"/> or <see cref="M:Mendix.StudioPro.ExtensionsAPI.UI.Menu.ContextMenuExtension`1.GetContextMenus(`0)"/>.
            </summary>
            <remarks>Menu item can be introduced through <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuBarExtension"/> or <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Menu.ContextMenuExtension`1"/>.</remarks>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuViewModelBase.PlaceUnder">
            <summary>
            Path to the menu item into which the current menu should be placed.
            </summary>
            <example>
            To put the menu just after "App > Create Deployment Package...", <see cref="P:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuViewModelBase.PlaceUnder"/> should be
            <c>new[] { "app" }</c> and <see cref="P:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuViewModelBase.PlaceAfter"/> should be <c>"create deployment package"</c>.
            Note, that punctuation symbols and capitalization are ignored.
            </example>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuViewModelBase.PlaceAfter">
            <summary>
            Name of the menu item after which the current menu should be placed. Or <c>null</c> to place it on top.
            </summary>
            <example>
            To put the menu just after "App > Create Deployment Package...", <see cref="P:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuViewModelBase.PlaceUnder"/> should be
            <c>new[] { "app" }</c> and <see cref="P:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuViewModelBase.PlaceAfter"/> should be <c>"create deployment package"</c>.
            Note, that punctuation symbols and capitalization are ignored.
            </example>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuViewModelBase.Separator">
            <summary>
            Indicates whether a menu separator should be placed <see cref="F:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuSeparator.Before"/> or <see cref="F:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuSeparator.After"/> this menu.
            <see cref="F:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuSeparator.None"/> by default.
            </summary>
            <remarks>Top level menus must use <see cref="F:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuSeparator.None"/>.</remarks>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuViewModelBase.Caption">
            <summary>
            Caption of the menu.
            </summary>
            <remarks>You can use a single <c>&#38;</c> in the caption to support Alt-based keyboard navigation.</remarks>
            <exception cref="T:System.ArgumentNullException">Passed value is null or empty.</exception>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuViewModelBase.IsEnabled">
            <summary>
            Whether the menu is enabled. True by default.
            </summary>
            <exception cref="T:System.NotSupportedException">Passed <c>false</c> value for a top-level menu.</exception>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.Menu.SubMenuViewModel">
            <summary>
            Representation of a sub-menu in the menu bar of Studio Pro or one of its sub-menus. <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Menu.SubMenuViewModel"/> acts as a container for other menu items.
            </summary>
            <remarks>Menu items can be introduced through <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuBarExtension"/>.</remarks>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.Menu.SubMenuViewModel.#ctor(System.String,System.Collections.Generic.IReadOnlyList{System.String},System.String,Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuSeparator)">
            <summary>
            Construct a new <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Menu.SubMenuViewModel"/>.
            </summary>
            <param name="caption">Caption of the menu. It can be changed later via <see cref="P:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuViewModelBase.Caption"/> property.</param>
            <param name="placeUnder">
            Path to the menu item into which the current menu should be placed. For example, <c>new[] { "app", "tools" }</c>.
            </param>
            <param name="placeAfter">
            Name of the menu item after which the current menu should be placed. Or <c>null</c> to place it on top.
            </param>
            <param name="separator">
            Indicates whether a menu separator should be placed <see cref="F:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuSeparator.Before"/> or <see cref="F:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuSeparator.After"/> this menu item.
            </param>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.Microflows.EditMicroflowExpressionResult">
            <summary>
            Represents the result of showing a microflow expression editor form.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.Microflows.EditMicroflowExpressionResult.IsCanceled">
            <summary>
            Whether the editor form was canceled by the user.
            </summary>
            <remarks>
            If the form was canceled, the <see cref="P:Mendix.StudioPro.ExtensionsAPI.UI.Microflows.EditMicroflowExpressionResult.Expression"/> property will always be <code>null</code>.
            </remarks>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.Microflows.EditMicroflowExpressionResult.Expression">
            <summary>
            The microflow expression. Can be <code>null</code> in case the form was canceled (see <see cref="P:Mendix.StudioPro.ExtensionsAPI.UI.Microflows.EditMicroflowExpressionResult.IsCanceled"/>).
            </summary>
            <remarks>
            Should only be used when <see cref="P:Mendix.StudioPro.ExtensionsAPI.UI.Microflows.EditMicroflowExpressionResult.IsCanceled"/> is <code>false</code>. Otherwise the value will be <code>null</code>.
            </remarks>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.Microflows.MicroflowActionCategory.#ctor(System.String,System.Single)">
            <summary>
            Defines a name and an ordering weight for the Microflow Activity Menu. Each <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Microflows.MicroflowActionViewExtension`1"/>
            needs to set a Category where it will be selectable from within the Microflow Activity Menu.
            </summary>
            <param name="name">The Name of the Category</param>
            <param name="weight">Defines the order of this name. Smaller is higher.</param>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.Microflows.MicroflowActionCategory.Name">
            <summary>
            The Display name of the name that the activity will be placed under within the activity type selection menu.
            Multiple Instances of MicroflowActionCategory that share the same Name will be collapsed internally into a single one.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.Microflows.MicroflowActionCategory.Weight">
            <summary>
            This controls the order in which your name will be displayed. Lower values will result in a activity handler that is placed higher in order.
            If multiple MicroflowActionCategory use the same Name but different weights then the lowest weight will be used.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.Microflows.MicroflowActionViewExtension`1">
            <summary>
            Base class for an extension that introduces UI for editing a custom microflow action. Note that use of this class requires the use of a (microflow) action that is not handled
            by the internal action handlers/>
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.Microflows.MicroflowActionViewExtension`1.Caption">
            <summary>
            The Caption that will be displayed when selecting an action type.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.Microflows.MicroflowActionViewExtension`1.Category">
            <summary>
            The category where the microflow action will be displayed in the UI.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.Microflows.MicroflowActionViewExtension`1.ActionSelectorIcon">
            <summary>
            This Icon that will be used within the action type selection menu.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.Microflows.MicroflowActionViewExtension`1.ToolboxImage">
            <summary>
            This Image will be used within the Toolbox window.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.Microflows.MicroflowActionViewExtension`1.GetPropertiesViewModel(`0)">
            <summary>
            This method is called when the microflow action is edited. You should use this method to return a <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Dialogs.ModalDialogViewModelBase"/> which will be used to display your custom editor.
            </summary>
            <param name="microflowAction">This will provide the MicroflowAction that is currently being edited.</param>
            <returns>ViewModel that will be displayed. Please check <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Dialogs.ModalDialogViewModelBase"/> for more information.</returns>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.Services.IAppService">
            <summary>
            Provides a set of Studio Pro level operations related to Mendix App.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.IAppService.GetOnlineAppIDForCurrentAppAsync">
            <summary>
            Returns the App ID of the Mendix online app corresponding to the currently opened app in Studio Pro.
            This App ID allows you to build interactions with the Mendix online services.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.IAppService.TryImportApp(Mendix.StudioPro.ExtensionsAPI.Model.IModel,System.String,System.String)">
            <summary>
            Try to import a mpk project file as a new app. The user will get a dialog asking how to import the app.
            </summary>
            <remarks>We advise you to use temporary directory for <paramref name="mpkFilePath"/> and remove the file after import.</remarks>
            <param name="model">Reference to the current model.</param>
            <param name="mpkFilePath">Path to the mpk that should be imported.</param>
            <param name="name">Suggested name of the new app</param>
            <returns>Flag indicating whether import was successful.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> or <paramref name="mpkFilePath"/> is null or empty.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="mpkFilePath"/> does not exist.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="model"/> has a pending transaction which is not allowed.</exception>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.IAppService.CheckVersionCompatible(Mendix.StudioPro.ExtensionsAPI.Model.IModel,System.String,System.String@)">
            <summary>
            Verify whether an app/module created by a given <paramref name="mendixVersion"/> of Studio Pro can be opened in the current Studio Pro.
            </summary>
            <param name="model">Reference to the current model.</param>
            <param name="mendixVersion">Semver v2 version string like <c>major.minor.patch</c>.</param>
            <param name="mismatchMessage">Description of incompatibility if the result is <c>false</c>.</param>
            <returns>Whether an app in a given version can be opened in the current Studio Pro.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="mendixVersion"/> is null or empty.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="mendixVersion"/> is in incorrect format.</exception>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.IAppService.TryImportModule(Mendix.StudioPro.ExtensionsAPI.Model.IModel,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Try to import a mpk file as a module to the app. If the module with the same name exists, user will get a dialog asking to replace it or
            to rename the importing module.
            </summary>
            <remarks>We advise you to use temporary directory for <paramref name="moduleMpkPath"/> and remove the file after import.</remarks>
            <param name="model">Reference to the current model.</param>
            <param name="moduleMpkPath">Path to the mpk that should be imported.</param>
            <param name="appId"></param>
            <param name="versionId"></param>
            <param name="version"></param>
            <param name="packageId"></param>
            <returns>Flag indicating whether import was successful.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="model"/> or <paramref name="moduleMpkPath"/> is null or empty.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="moduleMpkPath"/> does not exist.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="model"/> is not the one received from Studio Pro API.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="model"/> has a pending transaction which is not allowed.</exception>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.IAppService.SynchronizeWithFileSystem(Mendix.StudioPro.ExtensionsAPI.Model.IModel)">
            <summary>
            Synchronize model representation in Studio Pro with the recent changes on the file system, like changes in JavaScript actions or Widgets.
            </summary>
            <remarks>
            This method behaves similarly to a <see href="https://docs.mendix.com/refguide/app-menu/#synchronize">Synchronize App Directory</see> menu item.
            </remarks>
            <param name="model">Reference to the current model.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="model"/> is null or empty.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="model"/> is not the one received from Studio Pro API.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="model"/> has a pending transaction which is not allowed.</exception>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.Services.IDialogService">
            <summary>
            Provides methods to open and close modal dialogs.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.IDialogService.ShowDialog(Mendix.StudioPro.ExtensionsAPI.UI.Dialogs.ModalDialogViewModelBase)">
            <summary>
            Shows a modal dialog based on the passed <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Dialogs.ModalDialogViewModelBase"/>.
            The <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Dialogs.ModalDialogViewModelBase"/> dialog is currently only allowed to be
            created by implementing the abstract class <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Dialogs.WebViewModalDialogViewModel"/>,
            which will allow using a <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.WebView.IWebView"/> inside a modal dialog.
            </summary>
            <exception cref="T:System.Exception">
            <paramref name="dialog"/> is null.
            </exception>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.IDialogService.CloseDialog(Mendix.StudioPro.ExtensionsAPI.UI.Dialogs.ModalDialogViewModelBase)">
            <summary>
            Closes a modal dialog previously opened from the <see cref="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.IDialogService.ShowDialog(Mendix.StudioPro.ExtensionsAPI.UI.Dialogs.ModalDialogViewModelBase)"/> method.
            It returns errors if trying to close a dialog that was not previously opened or that has already been closed.
            </summary>
            <exception cref="T:System.Exception">
            <paramref name="dialog"/> is null.
            </exception>
            <exception cref="T:System.Exception">Thrown if the dialog was not initialized correctly.</exception>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.Services.IDockingWindowService">
            <summary>
            Provides access to the docking window of Studio Pro allowing for interactions with tabs, panes and editors.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.IDockingWindowService.OpenTab(Mendix.StudioPro.ExtensionsAPI.UI.Tab.TabViewModelBase)">
            <summary>
            Opens or activates a tab in the working area of Studio Pro.
            </summary>
            <remarks>
            When <paramref name="tab"/> already has a corresponding tab in the working area, that tab is activated. Otherwise, a new tab is opened.
            </remarks>
            <param name="tab">View model for the tab.</param>
            <exception cref="T:System.InvalidOperationException">When an unsupported view model type is passed in.</exception>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.IDockingWindowService.CloseTab(Mendix.StudioPro.ExtensionsAPI.UI.Tab.TabViewModelBase)">
            <summary>
            Closes a tab in the working area of Studio Pro.
            </summary>
            <param name="tab">View model of the tab to be closed.</param>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.IDockingWindowService.OpenPane(System.String)">
            <summary>
            Opens or activates a dockable pane.
            </summary>
            <param name="paneId">ID of the dockable pane to be opened. This corresponds to the <see cref="P:Mendix.StudioPro.ExtensionsAPI.UI.DockablePane.DockablePaneExtension.Id"/> property of a <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.DockablePane.DockablePaneExtension"/>.</param>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.IDockingWindowService.ClosePane(System.String)">
            <summary>
            Closes a dockable pane.
            </summary>
            <param name="paneId">ID of the dockable pane to be closed.</param>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.IDockingWindowService.TryOpenEditor(Mendix.StudioPro.ExtensionsAPI.Model.IAbstractUnit,Mendix.StudioPro.ExtensionsAPI.Model.IElement)">
            <summary>
            Tries to open an editor tab for the specified model unit.
            </summary>
            <param name="unit">The unit that will be opened in the editor.</param>
            <param name="elementToFocus">A UI element that should get the focus as soon as the editor is opened.</param>
            <returns>`true` if the active editor was successfully determined; otherwise, `false`.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="unit"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">When there is no app open in Studio Pro.</exception>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.IDockingWindowService.TryGetActiveEditor(Mendix.StudioPro.ExtensionsAPI.Model.IModel,Mendix.StudioPro.ExtensionsAPI.Model.IAbstractUnit@)">
            <summary>
            Tries to get the model unit of the active editor tab.
            </summary>
            <param name="model">The app model.</param>
            <param name="unit">When this method returns, contains the model unit that is currently opened in an editor or an undefined value on failure.</param>
            <returns>`true` if the active editor was successfully determined; otherwise, `false`.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="model"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">When there is no app open in Studio Pro.</exception>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.Services.IEntityService">
            <summary>
            Provides a set of operations on an entity.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.IEntityService.OpenEntityForm(Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity)">
            <summary>
            Opens the Entity form to modify an <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity"/>. Returns true if modifications to the entity were saved successfully, false if user cancelled.
            </summary>
            <param name="entity">The preliminary entity which will be modified in the form.</param>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.Services.IFindResultsPaneService">
            <summary>
            Provides operations to control the Find Results pane in Studio Pro.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.IFindResultsPaneService.ShowUsagesOf(Mendix.StudioPro.ExtensionsAPI.Model.IReferableStructure)">
            <summary>
            Shows the usages of the specified object in the Find Results pane.
            <param name="referableStructure">The object for which to show the usages. This can be any model object that can be referred to, such as <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity"/>.</param>
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.Services.ILocalRunConfigurationsService">
            <summary>
            Provides access to the active configuration.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.ILocalRunConfigurationsService.GetActiveConfiguration(Mendix.StudioPro.ExtensionsAPI.Model.IModel)">
            <summary>
            Gets the active configuration.
            </summary>
            <param name="model">Reference to the current app.</param>
            <returns>The active configuration.
            If the user did not select an active configuration, this returns the first configuration.
            If there are no configurations, which is a consistency error, this returns a default configuration.</returns>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.Services.IMessageBoxService">
            <summary>
            Provides a set of methods to show Error, Info or Warning message boxes.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.IMessageBoxService.ShowError(System.String,System.String,System.String,System.Uri)">
            <summary>
            Shows a message box with an error icon and the message provided. It can also support extra information.
            </summary>
            <param name="message">the error message.</param>
            <param name="details">optional extra information, which will be shown after the user clicks "Show Details" button.</param>
            <param name="linkText">the text for the hyperlink.</param>
            <param name="linkUri">the hyperlink of type <see cref="T:System.Uri"/>.</param>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.IMessageBoxService.ShowInformation(System.String,System.String,System.String,System.Uri)">
            <summary>
            Shows a message box with an information icon and the message provided.
            </summary>
            <param name="message">the information message.</param>
            <param name="details">optional extra information, which will be shown after the user clicks "Show Details" button.</param>
            <param name="linkText">the text for the hyperlink.</param>
            <param name="linkUri">the hyperlink of type <see cref="T:System.Uri"/>.</param>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.IMessageBoxService.ShowWarning(System.String,System.String,System.String,System.Uri)">
            <summary>
            Shows a message box with a warning icon and the message provided.
            </summary>
            <param name="message">the warning message.</param>
            <param name="details">optional extra information, which will be shown after the user clicks "Show Details" button.</param>
            <param name="linkText">the text for the hyperlink.</param>
            <param name="linkUri">the hyperlink of type <see cref="T:System.Uri"/>.</param>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.IMessageBoxService.ShowQuestion(System.String,System.String,System.String[],System.String)">
            <summary>
            Shows a message box with a question icon and the question provided.
            </summary>
            <param name="question">the question to ask the user.</param>
            <param name="details">optional extra information, which will be shown after the user clicks "Show Details" button.</param>
            <param name="buttons">optional list of buttons instead of the default 'Close' button.</param>
            <param name="defaultButton">optional button with keyboard focus when the dialog opens. It must be from the supplied list of buttons.</param>
            <returns>the text of the button which was clicked, as the answer to the question. If user did not provide custom buttons, it will be 'Close'.</returns> 
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.Services.IMicroflowExpressionEditorService">
            <summary>
            Provides operations to create or edit a <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.MicroflowExpressions.IMicroflowExpression"/>.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.IMicroflowExpressionEditorService.ShowExpressionEditor(System.String,Mendix.StudioPro.ExtensionsAPI.Model.MicroflowExpressions.IMicroflowExpression,Mendix.StudioPro.ExtensionsAPI.Model.Microflows.IMicroflowExpressionContext)">
            <summary>
            Opens a modal editor for creating or editing a <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.MicroflowExpressions.IMicroflowExpression"/>.
            </summary>
            <param name="title">The title of the editor form.</param>
            <param name="expressionContext">The expression context.</param>
            <param name="expression">The expression to be edited if it provided. Otherwise, if null, a new expression will be created.</param>
            <returns>Returns a <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Microflows.EditMicroflowExpressionResult"/> which contains the new or modified <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.MicroflowExpressions.IMicroflowExpression"/> passed into the form. If user cancels without saving, it returns a result with the property <see cref="P:Mendix.StudioPro.ExtensionsAPI.UI.Microflows.EditMicroflowExpressionResult.IsCanceled"/> set to <code>true</code>, in which case the <see cref="P:Mendix.StudioPro.ExtensionsAPI.UI.Microflows.EditMicroflowExpressionResult.Expression"/> will be null.</returns>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.Services.ISelectorDialogService">
            <summary>
            Provides a set of operations for showing the object (that is <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.IAbstractUnit">unit</see> or <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.IElement">element</see>) selection interface to Studio Pro user.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.ISelectorDialogService.SelectDocumentAsync``1(Mendix.StudioPro.ExtensionsAPI.UI.Services.DocumentSelectorDialogOptions{``0})">
            <summary>
            Shows interface (in a popup) for selecting <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Projects.IDocument"/> of a specific type <typeparamref name="TDocument"/> from all such documents in the app.
            </summary>
            <remarks>
            Use <see cref="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.ISelectorDialogService.SelectDocumentUntypedAsync(Mendix.StudioPro.ExtensionsAPI.UI.Services.DocumentSelectorDialogOptions{Mendix.StudioPro.ExtensionsAPI.Model.Projects.IDocument})"/> if you need to select a document of one of a few types, e.g. select either Microflow or Nanoflow.
            </remarks>
            <param name="options">An instance of <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Services.DocumentSelectorDialogOptions`1"/> that describes how the selector dialog should behave.</param>
            <typeparam name="TDocument">
            The type of the document that can be selected. It must be a concrete type like <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Microflows.IMicroflow"/> and not a base type like
            <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Microflows.IMicroflowBase"/>. If you need to select a document of a one of a few types, use <see cref="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.ISelectorDialogService.SelectDocumentUntypedAsync(Mendix.StudioPro.ExtensionsAPI.UI.Services.DocumentSelectorDialogOptions{Mendix.StudioPro.ExtensionsAPI.Model.Projects.IDocument})"/>.
            </typeparam>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that is resolved when the selection process is finished by Studio Pro user. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            contains an instance of <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Services.SelectorResult`1"/> representing the result of the selection process.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="options"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <typeparamref name="TDocument"/> does not refer to a concrete type, but to a base type.
            </exception>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.ISelectorDialogService.SelectDocumentUntypedAsync(Mendix.StudioPro.ExtensionsAPI.UI.Services.DocumentSelectorDialogOptions{Mendix.StudioPro.ExtensionsAPI.Model.Projects.IDocument})">
             <summary>
             Shows interface (in a popup) for selecting <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Projects.IDocument"/> from all documents in the app.
             </summary>
             <remarks>
             Providing a <see cref="P:Mendix.StudioPro.ExtensionsAPI.UI.Services.SelectorDialogOptions`2.Filter"/> in the <paramref name="options"/> parameter is required.
            
             Prefer using <see cref="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.ISelectorDialogService.SelectDocumentAsync``1(Mendix.StudioPro.ExtensionsAPI.UI.Services.DocumentSelectorDialogOptions{``0})"/> when the type of selectable document is known.
             </remarks>
             <param name="options">An instance of <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Services.DocumentSelectorDialogOptions`1"/> that describes how the selector dialog should behave.</param>
             <returns>
             A <see cref="T:System.Threading.Tasks.Task`1"/> that is resolved when the selection process is finished by Studio Pro user. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
             contains an instance of <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Services.SelectorResult`1"/> representing the result of the selection process.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="options"/> is null.
             </exception>
             <exception cref="T:System.ArgumentException">
             <paramref name="options"/> has its <see cref="P:Mendix.StudioPro.ExtensionsAPI.UI.Services.SelectorDialogOptions`2.Filter"/> property set to <code>null</code>.
             </exception>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.ISelectorDialogService.SelectEntityAsync(Mendix.StudioPro.ExtensionsAPI.UI.Services.EntitySelectorDialogOptions)">
            <summary>
            Shows interface (in a popup) for selecting an <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.DomainModels.IEntity"/> from all entities in the app model.
            </summary>
            <param name="options">An instance of <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Services.EntitySelectorDialogOptions"/> that describes how the selector dialog should behave.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that is resolved when the selection process is finished by Studio Pro user. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            contains an instance of <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Services.SelectorResult`1"/> representing the result of the selection process.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="options"/> is null.
            </exception>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.Services.SelectorDialogOptions`2">
            <summary>
            Options class for describing the behavior of a selector dialog in Studio Pro.
            </summary>
            <typeparam name="TStructure">The type of model element that is selected in the dialog.</typeparam>
            <typeparam name="TContainerStructure">The type of model element that is passed into the <see cref="P:Mendix.StudioPro.ExtensionsAPI.UI.Services.SelectorDialogOptions`2.CreateElement"/> function.</typeparam>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.SelectorDialogOptions`2.#ctor(Mendix.StudioPro.ExtensionsAPI.Model.IAbstractUnit,`0)">
            <summary>
            Construct a new <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Services.SelectorDialogOptions`2"/>
            </summary>
            <param name="context">
            Context in which the selection happens that is used to focus a specific <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Projects.IFolder"/> or <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Projects.IModule"/> in the shown interface.
            If you use <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Services.ISelectorDialogService"/> to aid editing of a model property, pass the <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Projects.IDocument"/> containing it.
            </param>
            <param name="initialSelection">
            The initially selected model element, if any. If you use <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Services.ISelectorDialogService"/> to aid editing of a model property, pass its current value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="context"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="context"/> is not an <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Projects.IDocument"/>, <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Projects.IFolder"/>, or <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Projects.IModule"/>.
            </exception>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.Services.SelectorDialogOptions`2.Context">
            <summary>
            Context in which the selection happens that is used to focus a specific <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Projects.IFolder"/> or <see cref="T:Mendix.StudioPro.ExtensionsAPI.Model.Projects.IModule"/> in the shown interface.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.Services.SelectorDialogOptions`2.InitialSelection">
            <summary>
            The initially selected model element, if any.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.Services.SelectorDialogOptions`2.AllowNone">
             <summary>
             Whether to show the 'None' button, which allows the user to select nothing, in which case <code>null</code> is returned as the result of the selector dialog.
            
             Default value: <code>true</code>
             </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.Services.SelectorDialogOptions`2.Filter">
            <summary>
            Optional filter to limit what model elements can be selected.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.Services.SelectorDialogOptions`2.CreateElement">
             <summary>
             Optional function to create a new model element. If not null, the 'New' button is displayed.
             </summary>
             <remarks>
             The function gets passed in a model element representing the desired container of the new element.
             This model element can be used to create the new element in a logical container,
             e.g. in the same module or folder that was selected when the 'New' button was clicked.
            
             If the function returns <code>null</code>, it is considered as a cancellation of creating a new element and the selector dialog will remain visible.
             </remarks>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.Services.DocumentSelectorDialogOptions`1">
            <summary>
            Options class for describing the behavior of a document selector dialog in Studio Pro.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.Services.EntitySelectorDialogOptions">
            <summary>
            Options class for describing the behavior of an entity selector dialog in Studio Pro.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.Services.SelectorResult`1">
            <summary>
            Represents the result of showing a selector dialog.
            </summary>
            <typeparam name="TStructure">The type of model element that is selected in the dialog.</typeparam>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.Services.SelectorResult`1.IsCanceled">
            <summary>
            Whether the selector dialog was canceled by the user.
            </summary>
            <remarks>
            If the dialog was canceled, the <see cref="P:Mendix.StudioPro.ExtensionsAPI.UI.Services.SelectorResult`1.Selection"/> property will always be <code>null</code>.
            </remarks>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.Services.SelectorResult`1.Selection">
            <summary>
            The selected model element. Can be <code>null</code> in case the dialog was canceled (see <see cref="P:Mendix.StudioPro.ExtensionsAPI.UI.Services.SelectorResult`1.IsCanceled"/>), or when the 'None' button was clicked.
            </summary>
            <remarks>
            Should only be used when <see cref="P:Mendix.StudioPro.ExtensionsAPI.UI.Services.SelectorResult`1.IsCanceled"/> is <code>false</code>. Otherwise the value will be <code>null</code>.
            </remarks>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.IVersionControlService.GetCurrentBranch(Mendix.StudioPro.ExtensionsAPI.Model.IModel)">
            <summary>
            Returns the branch that is currently checked out in Studio Pro
            </summary>
            <param name="app">Reference to the currently opened app</param>
            <exception cref="T:System.Exception">Thrown if it was impossible to read the git config of the current app</exception>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.IVersionControlService.GetHeadCommit(Mendix.StudioPro.ExtensionsAPI.Model.IModel,Mendix.StudioPro.ExtensionsAPI.VersionControl.IBranch)">
            <summary>
            Returns the head commit of the requested branch
            </summary>
            <param name="app">Reference to the currently opened app</param>
            <param name="branch">Reference to the branch that you're interested in</param>
            <exception cref="T:System.Exception">Thrown if the branch doesn't contain any commits</exception>
            <exception cref="T:System.Exception">Thrown if the branch doesn't exist</exception>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.IVersionControlService.IsProjectVersionControlled(Mendix.StudioPro.ExtensionsAPI.Model.IModel)">
            <summary>
            Shows whether the app is controlled by a version control system, no matter private or hosted by Mendix
            </summary>
            <param name="app">Reference to the currently opened app</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the provided path is invalid</exception>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.StartingPoints.NewAppStartingPointExtension">
            <summary>
            Base class for an extension that introduces new starting points used to create new apps in the Create New App form in Studio Pro.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.StartingPoints.NewAppStartingPointExtension.GetNewAppStartingPoints">
            <summary>
            Return <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.StartingPoints.NewAppStartingPointViewModel"/>s introduced by this extension.
            </summary>
            <returns>List of <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.StartingPoints.NewAppStartingPointViewModel"/> introduced by this extension.</returns>
            <remarks>
            This method is called once when the extension is initialized and must return all starting point for creating new apps.
            </remarks>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.StartingPoints.NewAppStartingPointViewModel">
            <summary>
            Representation of a starting point for creating a new app in Studio Pro. It adds a button to the list of starting points in the Create New App form in Studio Pro.
            </summary>
            <remarks>
            Custom starting points can be introduced through <see cref="M:Mendix.StudioPro.ExtensionsAPI.UI.StartingPoints.NewAppStartingPointExtension.GetNewAppStartingPoints"/>.
            </remarks>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.StartingPoints.NewAppStartingPointViewModel.Name">
            <summary>
            The name of the starting point.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.StartingPoints.NewAppStartingPointViewModel.Description">
            <summary>
            The description of the starting point. It will show in the next window after the button is clicked.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.StartingPoints.NewAppStartingPointViewModel.Subtitle">
            <summary>
            The subtitle of the starting point.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.StartingPoints.NewAppStartingPointViewModel.Identifier">
            <summary>
            The starting point's identifier so that it can be matched from new.mendix.com and the version selector.
            If there is a need to change this, make sure that the end points in new.mendix.com are also changed.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.StartingPoints.NewAppStartingPointViewModel.Thumbnail">
            <summary>
            The image that will show next to the name in the button.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.StartingPoints.NewAppStartingPointViewModel.Screenshot">
            <summary>
            The main image that will show in the next window after the button is clicked.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.StartingPoints.NewAppStartingPointViewModel.AfterAppCreated">
            <summary>
            The action that should happen after the app is created using this starting point. It is optional.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.Tab.TabViewModel">
            <summary>
            Representation of a tab in the <see href="https://docs.mendix.com/refguide/studio-pro-overview/#4-working-area">working area</see> of Studio Pro.
            </summary>
            <remarks>A tab can be opened through <see cref="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.IDockingWindowService.OpenTab(Mendix.StudioPro.ExtensionsAPI.UI.Tab.TabViewModelBase)"/> method.</remarks>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.Tab.TabViewModel.Controls">
            <summary>
            Content of the tab.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.Tab.TabViewModelBase.OnClosed">
            <summary>
            Optional action to execute when the dockable pane is closed.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.Tab.TabViewModelBase.Title">
            <summary>
            Title of the tab displayed in its header.
            </summary>
            <exception cref="T:System.ArgumentNullException">Passed value is null or empty.</exception>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.Tab.TabViewModelBase.Icon">
            <summary>
            Optional icon displayed in the tab header. <c>null</c> by default.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.Tab.WebViewTabViewModel">
            <summary>
            Representation of a tab in the <see href="https://docs.mendix.com/refguide/studio-pro-overview/#4-working-area">working area</see> of Studio Pro.
            This tab is meant to contain a <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.WebView.IWebView"/>.
            </summary>
            <remarks>A tab can be opened through <see cref="M:Mendix.StudioPro.ExtensionsAPI.UI.Services.IDockingWindowService.OpenTab(Mendix.StudioPro.ExtensionsAPI.UI.Tab.TabViewModelBase)"/> method.</remarks>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.UIExtensionBase">
            <summary>
            Base class for all extensions providing custom UI. Do not inherit from this class directly, but use concrete extension points like <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Menu.MenuBarExtension"/>.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.UIExtensionBase.CurrentApp">
            <summary>
            Currently opened app. Or <c>null</c> if no app is opened.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.UIExtensionBase.Subscribe``1(System.Action)">
            <summary>
            Subscribe to a Studio Pro event.
            </summary>
            <param name="onEvent">The action to execute when the event occurs.</param>
            <typeparam name="TEvent">The type of event to subscribe to.</typeparam>
            <exception cref="T:System.ArgumentNullException">If the action passed is <code>null</code></exception>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.UIExtensionBase.Unsubscribe(Mendix.StudioPro.ExtensionsAPI.UI.Events.IEventSubscription)">
            <summary>
            Unsubscribe from a Studio Pro event.
            </summary>
            <param name="subscription">The event subscription to remove.</param>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.UIExtensionBase.WebServerBaseUrl">
            <summary>
            Returns the base URL for the routes added by this extension in the internal Studio Pro web server.
            </summary>
            <remarks>
            This property is not available until the extension has been fully constructed.
            If you need to access this property in the initialization of your extension,
            subscribe to the <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.Events.ExtensionLoaded"/> event using <see cref="M:Mendix.StudioPro.ExtensionsAPI.UI.UIExtensionBase.Subscribe``1(System.Action)"/>
            to execute code immediately once the extension is loaded.
            </remarks>
            <exception cref="T:System.InvalidOperationException">When trying to access this property in the constructor of the extensions.</exception>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.ViewModelBase">
            <summary>
            Base class for any View Model - class which state is tracked and shown in the UI. Should not be used directly.
            </summary>
        </member>
        <member name="E:Mendix.StudioPro.ExtensionsAPI.UI.ViewModelBase.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <inheritdoc cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.WebServer.HandleWebRequestAsync">
            <summary>
            Represents a method for handling a web request.
            </summary>
            <remarks>
            Examine the <see cref="P:System.Net.HttpListenerRequest.Url"/> property of the <paramref name="request"/> parameter to determine the actual request URL for further processing.
            </remarks>
            <param name="request">An object representing the request made to the web server.</param>
            <param name="response">An object representing the response that will be sent back to the client.</param>
            <param name="cancellationToken">A cancellation token that can be used to detect when the request was cancelled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> instance.</returns>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.WebServer.IWebServer">
            <summary>
            Represents the internal web server of Studio Pro.
            </summary>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.WebServer.IWebServer.AddRoute(System.String,Mendix.StudioPro.ExtensionsAPI.UI.WebServer.HandleWebRequestAsync)">
            <summary>
            Adds a new route to the internal web server of Studio Pro.
            </summary>
            <param name="urlPrefix">The relative URL prefix of the route.</param>
            <param name="requestHandler">The request handler that is invoked when a web request comes in that matches this route.</param>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.WebServer.WebServerExtension">
            <summary>
            Base class for an extension that adds request handlers to the internal web server of Studio Pro.
            </summary>
            <remarks>
            The request handlers can be used for building web UI using a <see cref="T:Mendix.StudioPro.ExtensionsAPI.UI.WebView.IWebView"/>.
            </remarks>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.WebServer.WebServerExtension.InitializeWebServer(Mendix.StudioPro.ExtensionsAPI.UI.WebServer.IWebServer)">
            <summary>
            This method is called once to allow this extension to configure the built-in web server of Studio Pro.
            Use this method to add routes to the web server.
            </summary>
            <remarks>
            This method is called at most once after the extension is loaded.
            </remarks>
            <param name="webServer">An object representing the internal web server of Studio Pro.</param>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.WebView.IWebView">
            <summary>
            A web view allows developers to display web content from within their extension.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.WebView.IWebView.Address">
            <summary>
            Gets or sets the URI of the top level document of the web view. Setting this property causes a navigation of the top level document to the specified URI.
            </summary>
        </member>
        <member name="E:Mendix.StudioPro.ExtensionsAPI.UI.WebView.IWebView.MessageReceived">
             <summary>
             MessageReceived is raised when a message is received that was sent from the web document in the web view.
            
             It can be used as a two-way communication channel with the web view in combination with <see cref="M:Mendix.StudioPro.ExtensionsAPI.UI.WebView.IWebView.PostMessage(System.String,System.Object)"/>.
             </summary>
             <remarks>
             A message can be sent from the web document by calling the function `window.chrome.webview.postMessage(...)`.
             The web view expects the message to be an object with two properties, `message` and `data`.
             `message` should be a string that contains the message or message type.
             `data` is an optional object that contains additional data to be sent to the web view.
            
             The following code sample shows how to send a message from the web content:
             <code>
               function sendMessage() {
                 window.chrome.webview.postMessage({ message: "Message", data: { property1: "value1", property2: "value2" } });
               }
             </code>
             </remarks>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.WebView.IWebView.ShowDevTools">
            <summary>
                If AllowedDevTools is true this method will display the Chrome Developer Tools.
            </summary>
            <remarks>This method can only be called after the WebView initialization has been completed.</remarks>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.WebView.IWebView.Reload(System.Boolean)">
            <summary>
                Reloads the browser if AllowReload is set to true.
            </summary>
            <remarks>This method can only be called after the WebView initialization has been completed.</remarks>
            <param name="ignoreCache"></param>
        </member>
        <member name="M:Mendix.StudioPro.ExtensionsAPI.UI.WebView.IWebView.PostMessage(System.String,System.Object)">
             <summary>
             Posts a message to the top-level document in the web view.
            
             It can be used as a two-way communication channel with the web view in combination with <see cref="E:Mendix.StudioPro.ExtensionsAPI.UI.WebView.IWebView.MessageReceived"/>.
             </summary>
             <param name="message">The message to be sent to the top level document in this web view.</param>
             <param name="data">An optional object with additional data to be sent along with the message.</param>
             <remarks>
             Messages will be queued in the web view until the web document indicates it is ready to receive messages.
             The web document can receive messages by registering a handler and then posting a message `MessageListenerRegistered`.
             It is recommended to do this in the `body.onload` event of the web page.
            
             The following code example shows how the above could be implemented in an HTML page:
             <code>
             ...
             &lt;script&gt;
               // Called from body.onload event.
               function registerMessageListener() {
                 // Register message handler.
                 window.chrome.webview.addEventListener("message", handleMessage);
                 // Indicate that we're ready to receive messages.
                 window.chrome.webview.postMessage({ message: "MessageListenerRegistered" });
               }
            
               function handleMessage(event) {
                 const { message, data } = event.data;
                 alert(`Received message '${message}' with data: ${JSON.stringify(data, null, 2)}`);
               }
             &lt;/script&gt;
             ...
             &lt;body onload="registerMessageListener()"&gt;
             ...
             </code>
             </remarks>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.UI.WebView.MessageReceivedEventArgs">
            <summary>
            Event args for the <see cref="E:Mendix.StudioPro.ExtensionsAPI.UI.WebView.IWebView.MessageReceived"/> event.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.WebView.MessageReceivedEventArgs.Message">
            <summary>
            Gets the message that was sent from the web view.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.UI.WebView.MessageReceivedEventArgs.Data">
            <summary>
            Gets the additional data that was sent along with the message.
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.VersionControl.IBranch">
            <summary>
            Provides access to the details of a branch
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.VersionControl.IBranch.Name">
            <summary>
            Name of the branch
            </summary>
        </member>
        <member name="T:Mendix.StudioPro.ExtensionsAPI.VersionControl.ICommit">
            <summary>
            Provides access to the details of a commit
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.VersionControl.ICommit.ID">
            <summary>
            The commit ID, presented in the form of a SHA-1 hash.
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.VersionControl.ICommit.Author">
            <summary>
            The author of the commit
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.VersionControl.ICommit.Date">
            <summary>
            Date and time of the commit
            </summary>
        </member>
        <member name="P:Mendix.StudioPro.ExtensionsAPI.VersionControl.ICommit.Message">
            <summary>
            The commit message added by the author
            </summary>
        </member>
    </members>
</doc>
